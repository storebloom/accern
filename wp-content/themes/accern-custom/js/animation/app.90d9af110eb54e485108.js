webpackJsonp([1],{"6MN0":function(n,e){n.exports="precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform vec2 pointSize; // [size, scale]\nuniform vec2 fogRange; // [near, far]\n\nuniform float tick;\nuniform float positionBlend;\nuniform float positionBlendTarget;\nuniform float positionBlendFactor;\nuniform vec2 positionDistortion;\nuniform vec3 positionScale;\n\nuniform vec3 cursorPosition;\nuniform float cursorForce;\n\nattribute vec3 positionA;\nattribute vec3 positionB;\nattribute float positionBlendOffset;\n\nvarying float vOpacity;\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_5_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289_5_0(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute_5_1(vec3 x) {\n  return mod289_5_0(((x*34.0)+1.0)*x);\n}\n\nfloat snoise_5_2(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289_5_0(i); // Avoid truncation effects in permutation\n  vec3 p = permute_5_1( permute_5_1( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\n\n// blend equals positionBlendTarget for positionBlendFactor of 0\nfloat blend_1_3 (\n  float positionBlend_1_4, float positionBlendOffset_1_5,\n  float positionBlendTarget_1_6, float positionBlendFactor_1_7\n) {\n  float blend = positionBlend_1_4 + positionBlendOffset_1_5;\n  blend = sign(blend) * fract(blend);\n  blend *= blend * blend;\n  return mix(positionBlendTarget_1_6, blend, positionBlendFactor_1_7);\n}\n\n\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_7_8(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_7_8(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_7_9(vec4 x) {\n     return mod289_7_8(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_7_10(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise_7_11(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D_7_12 = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_7_13 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_7_13;\n  vec3 i1 = min( g_7_13.xyz, l.zxy );\n  vec3 i2 = max( g_7_13.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D_7_12.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_7_8(i);\n  vec4 p = permute_7_9( permute_7_9( permute_7_9(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D_7_12.wyz - D_7_12.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1_7_14 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0_7_15 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1_7_14.xy,h.z);\n  vec3 p3 = vec3(a1_7_14.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_7_10(vec4(dot(p0_7_15,p0_7_15), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_7_15 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0_7_15,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\n\nvec3 snoiseVec3_6_16( vec3 x ){\n\n  float s  = snoise_7_11(vec3( x ));\n  float s1 = snoise_7_11(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n  float s2 = snoise_7_11(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n  vec3 c = vec3( s , s1 , s2 );\n  return c;\n\n}\n\n\nvec3 curlNoise_6_17( vec3 p ){\n  \n  const float e = .1;\n  vec3 dx = vec3( e   , 0.0 , 0.0 );\n  vec3 dy = vec3( 0.0 , e   , 0.0 );\n  vec3 dz = vec3( 0.0 , 0.0 , e   );\n\n  vec3 p_x0 = snoiseVec3_6_16( p - dx );\n  vec3 p_x1 = snoiseVec3_6_16( p + dx );\n  vec3 p_y0 = snoiseVec3_6_16( p - dy );\n  vec3 p_y1 = snoiseVec3_6_16( p + dy );\n  vec3 p_z0 = snoiseVec3_6_16( p - dz );\n  vec3 p_z1 = snoiseVec3_6_16( p + dz );\n\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\n\n  const float divisor = 1.0 / ( 2.0 * e );\n  return normalize( vec3( x , y , z ) * divisor );\n\n}\n\n\n\n\nvec3 distort_2_18 (vec3 position_2_19, float scale_2_20, float magnitude_2_21) {\n  vec3 offset = curlNoise_6_17(position_2_19 * scale_2_20);\n  return position_2_19 + offset * magnitude_2_21;\n}\n\n\n\nvec3 cursorOffsetPosition_3_22 (\n  vec3 position_3_23, vec3 cursorPosition_3_24, float cursorForce_3_25,\n  float radius_3_26\n) {\n  vec3 cursorDiff = position_3_23 - cursorPosition_3_24;\n  float cursorDist = length(cursorDiff);\n  cursorDiff *= (1.0 - min(1.0, cursorDist / radius_3_26)) * cursorForce_3_25;\n  return cursorDiff;\n}\n\n\n\nfloat easeFlicker_4_27 (float t_4_28) {\n  return sin(\n    sin(17.0 * t_4_28) +\n    sin(23.0 * t_4_28) +\n    sin(41.0 * t_4_28) +\n    sin(59.0 * t_4_28) +\n    sin(127.0 * t_4_28));\n}\n\n\n\n\nvoid main() {\n  float blend = blend_1_3(positionBlend,\n    positionBlendOffset, positionBlendTarget, positionBlendFactor);\n  blend = fract(blend);\n\n  float distortion = mix(positionDistortion.x, positionDistortion.y, blend);\n  vec3 position = mix(positionA, positionB, blend) * positionScale;\n  position += cursorOffsetPosition_3_22(position, cursorPosition, cursorForce, 40.0);\n  position = distort_2_18(position, 0.05, distortion);\n  vec4 mvPosition = model * view * vec4(position, 1.0);\n\n  float n0 = snoise_5_2(position.xz * 0.01 + tick * 0.01);\n  float noiseFade = 3.0 *\n    (sin(n0 * 0.5) * 0.4 + 0.6) *\n    (sin(tick * 0.02) * 0.4 + 0.6) +\n    (sin(n0 * 1.5) * 0.4 + 0.6) * 0.8;\n\n  float fogFade = 1.0 - min(1.0,\n    smoothstep(fogRange.x, fogRange.y, length(mvPosition.xyz)));\n  float blendFade = smoothstep(0.0, 0.5,\n    1.0 - abs(abs(blend) * 2.0 - 1.0));\n\n  float flickerFade = mix(\n    easeFlicker_4_27(tick * 0.2 + positionBlendOffset),\n    1.0, noiseFade * fogFade * blendFade);\n\n  float size = pointSize[0];\n  float scale = pointSize[1] *\n    clamp(smoothstep(0.5, 1.0, blendFade * blendFade) * 0.5 + 0.5, 0.0, 1.0) +\n    n0 * 2.0;\n\n  vOpacity = noiseFade * fogFade * blendFade * flickerFade;\n  gl_PointSize = size * (scale / -mvPosition.z);\n  gl_Position = projection * view * model * vec4(position, 1.0);\n}\n"},"6MZY":function(n,e){},"7JPB":function(n,e){n.exports="#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\n#define GLSLIFY 1\n\n#define PI 3.141592653589793\n\nuniform sampler2D color;\nuniform sampler2D bloom;\n\nuniform float bloomIntensity;\nuniform float noiseIntensity;\n\nuniform float tick;\nuniform vec3 viewResolution; // [x, y, pxRatio]\n\nvarying vec2 uv;\n\nfloat blendColorBurn_2_0(float base, float blend) {\n\treturn (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\n}\n\nvec3 blendColorBurn_2_0(vec3 base, vec3 blend) {\n\treturn vec3(blendColorBurn_2_0(base.r,blend.r),blendColorBurn_2_0(base.g,blend.g),blendColorBurn_2_0(base.b,blend.b));\n}\n\nvec3 blendColorBurn_2_0(vec3 base, vec3 blend, float opacity) {\n\treturn (blendColorBurn_2_0(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n\nhighp float random_3_1(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n\nfloat vignette_1_2(vec2 coord, float radius, float smoothness) {\n\tfloat diff = radius - distance(coord, vec2(0.5, 0.5));\n\treturn smoothstep(-smoothness, smoothness, diff);\n}\n\n\n\n\nvoid main() {\n  vec2 fragCoord = uv * viewResolution.xy / viewResolution.z;\n  vec2 fragCenter = fragCoord - viewResolution.xy / viewResolution.z * 0.5;\n  vec2 fragPosition = fragCenter - vec2(0.0);\n\n  // Base Color\n  vec3 baseColor = texture2D(color, uv).rgb;\n\n  // Bloom\n  vec3 bloomColor = baseColor * 0.4;\n  if (bloomIntensity > 0.0) {\n    bloomColor = texture2D(bloom, uv).rgb * bloomIntensity;\n  }\n\n  vec3 outColor = baseColor + bloomColor;\n\n  // Noise\n  vec3 noiseColor = vec3(0.0);\n  if (noiseIntensity > 0.0) {\n    float noiseSample = random_3_1(fract(uv + tick * 0.001));\n    noiseColor = vec3(\n      (clamp(0.1 + noiseSample, 0.0, 1.0) * 2.0 - 1.0) * noiseIntensity);\n  }\n\n  // Vignette\n  vec3 vignetteColor = vec3(vignette_1_2(uv, 1.0, 0.6));\n\n  // Composite\n  outColor = blendColorBurn_2_0(\n    outColor + outColor * noiseColor,\n    vignetteColor);\n\n  gl_FragColor = vec4(outColor, 1.0);\n}\n"},Ax8r:function(n,e){n.exports="precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform vec2 fogRange; // [near, far]\n\nuniform float tick;\nuniform float positionBlend;\nuniform float positionBlendTarget;\nuniform float positionBlendFactor;\nuniform vec2 positionDistortion;\nuniform vec3 positionScale;\n\nuniform vec3 cursorPosition;\nuniform float cursorForce;\n\nattribute vec3 positionA;\nattribute vec3 positionB;\nattribute float positionBlendOffset;\n\nvarying float vOpacity;\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_4_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289_4_0(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute_4_1(vec3 x) {\n  return mod289_4_0(((x*34.0)+1.0)*x);\n}\n\nfloat snoise_4_2(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289_4_0(i); // Avoid truncation effects in permutation\n  vec3 p = permute_4_1( permute_4_1( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\n\n// blend equals positionBlendTarget for positionBlendFactor of 0\nfloat blend_1_3 (\n  float positionBlend_1_4, float positionBlendOffset_1_5,\n  float positionBlendTarget_1_6, float positionBlendFactor_1_7\n) {\n  float blend = positionBlend_1_4 + positionBlendOffset_1_5;\n  blend = sign(blend) * fract(blend);\n  blend *= blend * blend;\n  return mix(positionBlendTarget_1_6, blend, positionBlendFactor_1_7);\n}\n\n\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_6_8(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_6_8(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_6_9(vec4 x) {\n     return mod289_6_8(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_6_10(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise_6_11(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D_6_12 = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_6_13 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_6_13;\n  vec3 i1 = min( g_6_13.xyz, l.zxy );\n  vec3 i2 = max( g_6_13.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D_6_12.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_6_8(i);\n  vec4 p = permute_6_9( permute_6_9( permute_6_9(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D_6_12.wyz - D_6_12.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1_6_14 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0_6_15 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1_6_14.xy,h.z);\n  vec3 p3 = vec3(a1_6_14.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_6_10(vec4(dot(p0_6_15,p0_6_15), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_6_15 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0_6_15,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\n\nvec3 snoiseVec3_5_16( vec3 x ){\n\n  float s  = snoise_6_11(vec3( x ));\n  float s1 = snoise_6_11(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n  float s2 = snoise_6_11(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n  vec3 c = vec3( s , s1 , s2 );\n  return c;\n\n}\n\n\nvec3 curlNoise_5_17( vec3 p ){\n  \n  const float e = .1;\n  vec3 dx = vec3( e   , 0.0 , 0.0 );\n  vec3 dy = vec3( 0.0 , e   , 0.0 );\n  vec3 dz = vec3( 0.0 , 0.0 , e   );\n\n  vec3 p_x0 = snoiseVec3_5_16( p - dx );\n  vec3 p_x1 = snoiseVec3_5_16( p + dx );\n  vec3 p_y0 = snoiseVec3_5_16( p - dy );\n  vec3 p_y1 = snoiseVec3_5_16( p + dy );\n  vec3 p_z0 = snoiseVec3_5_16( p - dz );\n  vec3 p_z1 = snoiseVec3_5_16( p + dz );\n\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\n\n  const float divisor = 1.0 / ( 2.0 * e );\n  return normalize( vec3( x , y , z ) * divisor );\n\n}\n\n\n\n\nvec3 distort_2_18 (vec3 position_2_19, float scale_2_20, float magnitude_2_21) {\n  vec3 offset = curlNoise_5_17(position_2_19 * scale_2_20);\n  return position_2_19 + offset * magnitude_2_21;\n}\n\n\n\nvec3 cursorOffsetPosition_3_22 (\n  vec3 position_3_23, vec3 cursorPosition_3_24, float cursorForce_3_25,\n  float radius_3_26\n) {\n  vec3 cursorDiff = position_3_23 - cursorPosition_3_24;\n  float cursorDist = length(cursorDiff);\n  cursorDiff *= (1.0 - min(1.0, cursorDist / radius_3_26)) * cursorForce_3_25;\n  return cursorDiff;\n}\n\n\n\n\nvoid main() {\n  float blend = blend_1_3(positionBlend,\n    positionBlendOffset, positionBlendTarget, positionBlendFactor);\n\n  float distortion = mix(positionDistortion.x, positionDistortion.y, blend);\n  vec3 position = mix(positionA, positionB, blend) * positionScale;\n  position += cursorOffsetPosition_3_22(position, cursorPosition, cursorForce, 40.0);\n  position = distort_2_18(position, 0.05, distortion);\n  vec4 mvPosition = model * view * vec4(position, 1.0);\n\n  float n0 = snoise_4_2(position.xy * 0.01 + tick * 0.01);\n  float noiseFade = 0.3 * (1.0 *\n    (sin(n0 * 0.5) * 0.8 + 0.2) *\n    (sin(tick * 0.02) * 0.4 + 0.6) +\n    (sin(n0 * 1.5) * 0.7 + 0.3) * 0.8);\n\n  float fogFade = 1.0 - min(1.0,\n    smoothstep(fogRange.x, fogRange.y, length(mvPosition.xyz)));\n  float blendFade = smoothstep(0.0, 0.5,\n    1.0 - abs(abs(blend) * 2.0 - 1.0));\n\n  vOpacity = noiseFade * fogFade * blendFade;\n  gl_Position = projection * mvPosition;\n}\n"},CebH:function(n,e){n.exports="precision highp float;\n#define GLSLIFY 1\nattribute vec2 position;\nvarying vec2 uv;\n\nvoid main() {\n  uv = 0.5 * (position + 1.0);\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n"},FDCe:function(n,e){n.exports="precision highp float;\n#define GLSLIFY 1\n\nuniform vec4 color;\n\nvarying float vOpacity;\n\nvoid main() {\n  gl_FragColor = vec4(color.rgb, color.a * vOpacity);\n}\n"},IVnp:function(n,e){n.exports="#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\n#define GLSLIFY 1\n\nuniform vec4 tint;\n\nvarying vec4 vColor;\nvarying vec2 vUD;\n\n// TODO: Apply antialiasing to line ends\nfloat lineAntialiasAlpha_1_0 (float coord_1_1) {\n  float acoord = (coord_1_1 + 1.0) / 2.0;\n  return clamp(\n    abs(fract(acoord - 0.5) - 0.5) / fwidth(acoord),\n    0.0, 1.0);\n}\n\n\n\n\nvoid main() {\n  vec2 ud = vUD;\n  vec3 outColor = vColor.rgb * tint.rgb;\n  float outAlpha = vColor.a * tint.a * lineAntialiasAlpha_1_0(ud.x);\n\n  gl_FragColor = vec4(outColor, outAlpha);\n}\n"},MOeh:function(n,e){n.exports="precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform vec2 fogRange; // [near, far]\n\nuniform float tick;\nuniform float positionBlend;\nuniform float positionBlendTarget;\nuniform float positionBlendFactor;\nuniform vec2 positionDistortion;\nuniform vec3 positionScale;\n\nuniform vec3 cursorPosition;\nuniform float cursorForce;\n\nattribute vec3 positionA;\nattribute vec3 positionB;\nattribute float positionBlendOffset;\n\nvarying float vOpacity;\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_4_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289_4_0(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute_4_1(vec3 x) {\n  return mod289_4_0(((x*34.0)+1.0)*x);\n}\n\nfloat snoise_4_2(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289_4_0(i); // Avoid truncation effects in permutation\n  vec3 p = permute_4_1( permute_4_1( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\n\n// blend equals positionBlendTarget for positionBlendFactor of 0\nfloat blend_1_3 (\n  float positionBlend_1_4, float positionBlendOffset_1_5,\n  float positionBlendTarget_1_6, float positionBlendFactor_1_7\n) {\n  float blend = positionBlend_1_4 + positionBlendOffset_1_5;\n  blend = sign(blend) * fract(blend);\n  blend *= blend * blend;\n  return mix(positionBlendTarget_1_6, blend, positionBlendFactor_1_7);\n}\n\n\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_6_8(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_6_8(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_6_9(vec4 x) {\n     return mod289_6_8(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_6_10(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise_6_11(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D_6_12 = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_6_13 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_6_13;\n  vec3 i1 = min( g_6_13.xyz, l.zxy );\n  vec3 i2 = max( g_6_13.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D_6_12.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_6_8(i);\n  vec4 p = permute_6_9( permute_6_9( permute_6_9(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D_6_12.wyz - D_6_12.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1_6_14 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0_6_15 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1_6_14.xy,h.z);\n  vec3 p3 = vec3(a1_6_14.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_6_10(vec4(dot(p0_6_15,p0_6_15), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_6_15 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0_6_15,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\n\nvec3 snoiseVec3_5_16( vec3 x ){\n\n  float s  = snoise_6_11(vec3( x ));\n  float s1 = snoise_6_11(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n  float s2 = snoise_6_11(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n  vec3 c = vec3( s , s1 , s2 );\n  return c;\n\n}\n\n\nvec3 curlNoise_5_17( vec3 p ){\n  \n  const float e = .1;\n  vec3 dx = vec3( e   , 0.0 , 0.0 );\n  vec3 dy = vec3( 0.0 , e   , 0.0 );\n  vec3 dz = vec3( 0.0 , 0.0 , e   );\n\n  vec3 p_x0 = snoiseVec3_5_16( p - dx );\n  vec3 p_x1 = snoiseVec3_5_16( p + dx );\n  vec3 p_y0 = snoiseVec3_5_16( p - dy );\n  vec3 p_y1 = snoiseVec3_5_16( p + dy );\n  vec3 p_z0 = snoiseVec3_5_16( p - dz );\n  vec3 p_z1 = snoiseVec3_5_16( p + dz );\n\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\n\n  const float divisor = 1.0 / ( 2.0 * e );\n  return normalize( vec3( x , y , z ) * divisor );\n\n}\n\n\n\n\nvec3 distort_2_18 (vec3 position_2_19, float scale_2_20, float magnitude_2_21) {\n  vec3 offset = curlNoise_5_17(position_2_19 * scale_2_20);\n  return position_2_19 + offset * magnitude_2_21;\n}\n\n\n\nvec3 cursorOffsetPosition_3_22 (\n  vec3 position_3_23, vec3 cursorPosition_3_24, float cursorForce_3_25,\n  float radius_3_26\n) {\n  vec3 cursorDiff = position_3_23 - cursorPosition_3_24;\n  float cursorDist = length(cursorDiff);\n  cursorDiff *= (1.0 - min(1.0, cursorDist / radius_3_26)) * cursorForce_3_25;\n  return cursorDiff;\n}\n\n\n\n\nvoid main() {\n  float blend = blend_1_3(positionBlend,\n    positionBlendOffset, positionBlendTarget, positionBlendFactor);\n\n  float distortion = mix(positionDistortion.x, positionDistortion.y, blend);\n  vec3 position = mix(positionA, positionB, blend) * positionScale;\n  position += cursorOffsetPosition_3_22(position, cursorPosition, cursorForce, 40.0);\n  position = distort_2_18(position, 0.05, distortion);\n  vec4 mvPosition = model * view * vec4(position, 1.0);\n\n  float n0 = snoise_4_2(position.xy * 0.01 + tick * 0.01);\n  float noiseFade = 1.0 * (1.0 *\n    (sin(n0 * 0.5) * 0.8 + 0.2) *\n    (sin(tick * 0.02) * 0.4 + 0.6) +\n    (sin(n0 * 1.5) * 0.7 + 0.3) * 0.8);\n\n  float fogFade = 1.0 - min(1.0,\n    smoothstep(fogRange.x, fogRange.y, length(mvPosition.xyz)));\n  float blendFade = smoothstep(0.0, 0.5,\n    1.0 - abs(abs(blend) * 2.0 - 1.0));\n\n  vOpacity = noiseFade * fogFade * blendFade;\n  gl_Position = projection * mvPosition;\n}\n"},N4pm:function(n,e){n.exports="precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D texture;\nuniform vec4 color;\n\nvarying float vOpacity;\n\nvoid main() {\n  vec2 uv = vec2(gl_PointCoord.x, 1.0 - gl_PointCoord.y);\n  vec4 textureColor = texture2D(texture, uv);\n\n  gl_FragColor = vec4(color * textureColor) * vOpacity;\n}\n"},NHnr:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=t("7+uW"),i=t("RTGR");var s={name:"info-overlay",components:{},props:{model:Object,leaderPosition:Object,offsetRoot:{validator:function(n){return n instanceof HTMLElement}}},mounted:function(){window.addEventListener("resize",this.handleResize),this.updateLeaderPosition()},beforeDestroy:function(){window.removeEventListener("resize",this.handleResize)},methods:{handleResize:function(n){this.updateLeaderPosition()},updateLeaderPosition:function(){var n=this.leaderPosition,e=this.model,t=this.offsetRoot,o=function(n,e){for(var t={top:0,left:0},o=n;o&&o!==e;)t.left+=o.offsetLeft,t.top+=o.offsetTop,o=o.offsetParent;return t}(this.$refs.leaderAnchor,t);i.c.set(n.tail,o.left+1,o.top+1),i.d.copy(n.target,e.leaderTarget)}}},r={render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",{class:"info-overlay info-overlay--"+n.model.position},[t("header",{staticClass:"info-overlay__header"},[t("div",{ref:"leaderAnchor",staticClass:"info-overlay__leader-anchor"}),n._v(" "),n._m(0),n._v(" "),t("div",{staticClass:"info-overlay__header__content"},[t("h2",{staticClass:"info-overlay__title"},[n._v(n._s(n.model.title))])])]),n._v(" "),t("div",{staticClass:"info-overlay__content"},[t("div",{staticClass:"info-overlay__content__background"}),n._v(" "),t("div",{staticClass:"info-overlay__content__background-corner"}),n._v(" "),t("div",{staticClass:"info-overlay__content__background-corner-fill"}),n._v(" "),t("ul",{class:"info-overlay__list info-overlay__list--"+n.model.listType},n._l(n.model.list,function(e,o){return t("li",{key:o,staticClass:"info-overlay__list-item",class:e.style?"info-overlay__list-item--"+e.style:""},[e.icon?t("div",{class:"info-overlay__icon info-overlay__icon--"+e.icon}):n._e(),n._v(" "),e.info?t("div",{staticClass:"info-overlay__info"},[t("span",{domProps:{innerHTML:n._s(e.info)}})]):n._e()])}))])])},staticRenderFns:[function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"info-overlay__header__background"},[e("div",{staticClass:"info-overlay__header__background-fill"}),this._v(" "),e("div",{staticClass:"info-overlay__header__background-corner"}),this._v(" "),e("div",{staticClass:"info-overlay__header__background-corner-fill"})])}]};var a=t("VU/8")(s,r,!1,function(n){t("WeEh")},null,null).exports,c=t("AYcQ"),l=t.n(c),u=t("9FLw"),f=t.n(u),d=t("uN3R"),p=t.n(d),v=t("//Fk"),x=t.n(v);function m(n,e,t,o){var i={},s=n?n[e]:e,r=n?n[t]:t,a=n||i,c=o||1/60*1e3,l=c,u=0,f=!1,d=void 0;function p(){if(f){var n=Date.now(),e=Math.min(l,n-d);i.didUpdate=!1,function(n){u+=n;var e=Math.floor(u/c);for(e>0&&(u-=e*c,i.didUpdate=!0);e>0;)s.call(a,c),e--;var t=u/c;r.call(a,c,t)}(e),window.requestAnimationFrame(p),d=n}}return i.stop=function(){f=!1},i.start=function(){d=Date.now(),f=!0,p()},i.toggle=function(){f?i.stop():i.start()},i}function _(n,e,t,o,i){return t+(i-n)*(o-t)/(e-n)}function h(n,e,t){return Math.min(e,Math.max(n,t))}var y=t("fZjL"),g=t.n(y);function b(n){return new x.a(function(e){!function(n,e){setTimeout(function(){window.requestAnimationFrame(n)},e)}(e,n)})}function P(n,e,t,o){var i=this,s={id:null,lastTime:0};return"boolean"!=typeof e&&(o=t,t=e,e=void 0),function(){for(var r=arguments.length,a=Array(r),c=0;c<r;c++)a[c]=arguments[c];var l=Date.now()-s.lastTime,u=function(){s.lastTime=Date.now(),t.apply(i,a)};if(o&&!s.id&&u(),s.id&&clearTimeout(s.id),null==o&&l>n)u();else if(!0!==e){var f=o?function(){s.id=null}:u,d=o?n-l:n;s.id=setTimeout(f,d)}}}function C(n,e,t){return void 0===t?P(n,e,!1):P(n,t,!1!==e)}function w(n,e,t,o){var i=t[n],s=e[n];return null==s&&(s=e[n]=i),e[n]+=(i-s)*o,e[n]}var z={vec2:[0,1],vec3:[0,1,2]};function A(n,e,t,o,i){for(var s=0;s<n.length;s++){w(n[s],t[e],o[e],i)}}var B=2500,S=4500,F=3e3;function D(n){return arguments.length>1?Float32Array.from(arguments):new Float32Array(n)}function M(){return{scene:{isTransitioning:!1,count:B,countBrain:S,countStream:F,current:{positionBlend:0,positionBlendDir:-1,positionBlendSpeed:0,positionBlendFactor:0,focusPointsAlpha:0,connectionsAlpha:0,cloudAlpha:0,brainAlpha:0,streamAlpha:0,leaderAlpha:0},target:{positionBlend:0,positionBlendDir:-1,positionBlendSpeed:0,positionBlendFactor:0,focusPointsAlpha:0,connectionsAlpha:0,cloudAlpha:0,brainAlpha:0,streamAlpha:0,leaderAlpha:0},neighbors:{connections:null,offset:0,interval:50,intervalSearch:8,max:200},sequences:null,activeSequenceKey:-1,activeSequence:null},camera:function(){function n(n,e,t){return D(n,e,t)}return{current:{coords:n(Math.PI/2,Math.PI/4,400),center:n(0,0,0)},target:{coords:n(Math.PI/2,0,400),center:n(0,0,0)}}}(),viewport:{isScrolling:!1,isLandscape:!1,didResize:!1,pixelRatioNative:window.devicePixelRatio,pixelRatioClamped:1,size:D(2),bounds:D(4),resolution:D(2),center:D(2)},cursor:{hasIntersection:!1,origin:D(3),direction:D(3),current:{position:D(2),unitPosition:D(2),intersection:D(3),force:0},target:{position:D(2),unitPosition:D(2),intersection:D(3),force:0},hitPlane:{normal:D(0,0,1),distance:0},hitSphere:{center:D(0,0,0),radius:60}}}}var I=t("8a/n"),T=t.n(I);var N=t("z0Vl"),O=t.n(N),R=t("CebH"),L=t.n(R),E=t("7JPB"),k=t.n(E),q=t("rVZh"),j=t.n(q),V=t("bqTp"),G=t.n(V);function U(n,e){var t=document.createElement("canvas"),o=T()({canvas:t,extensions:["OES_standard_derivatives"],attributes:{antialias:!1,preserveDrawingBuffer:!1,premultipliedAlpha:!1,alpha:!1}}),i=function(n){for(var e=function(){return n.framebuffer({color:n.texture({mag:"linear",min:"linear",wrap:"clamp"}),depth:!1})},t={blank:e()},o=arguments.length,i=Array(o>1?o-1:0),s=1;s<o;s++)i[s-1]=arguments[s];return i.forEach(function(n){t[n]=e()}),{get:function(n,e){var o=t[n];return e&&o.resize(e[0],e[1]),o},swap:function(n,e){var o=t[n],i=t[e];t[n]=i,t[e]=o},resize:function(n,e){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;t[n].resize(Math.round(e[0]*o),Math.round(e[1]*o))}}}(o,"full","blurA","blurB"),s={setupDrawScreen:function(n){return n({vert:L.a,attributes:{position:[-4,-4,4,-4,0,4]},count:3,depth:{enable:!1}})}(o),drawScreen:function(n){return n({frag:k.a,uniforms:{color:n.prop("color"),bloom:n.prop("bloom"),bloomIntensity:n.prop("bloomIntensity"),noiseIntensity:n.prop("noiseIntensity"),tick:n.prop("tick"),viewResolution:n.prop("viewResolution")}})}(o),drawGaussBlur:function(n){return n({frag:G.a,uniforms:{color:n.prop("color"),blurDirection:n.prop("blurDirection"),viewResolution:n.prop("viewResolution")}})}(o),drawRect:function(n){return n({frag:O.a,vert:L.a,attributes:{position:[-4,-4,4,-4,0,4]},count:3,blend:{enable:!0,equation:"add",func:{src:"src alpha",dst:"one minus src alpha"}},depth:{enable:!1},uniforms:{color:n.prop("color")}})}(o),drawTexture:function(n){return n({frag:j.a,uniforms:{color:n.prop("color")}})}(o)};return n.defer(function(n){return n.scene.appendChild(t),x.a.resolve()},"inject"),n.add(function(n){var o=e.viewport.resolution;t.width=o[0],t.height=o[1]},"resize"),{regl:o,canvas:t,postBuffers:i,commands:s}}var Y=t("iTbv"),W=t.n(Y),H=t("hvnN"),$=t.n(H),Z=t("iFfL"),K=t.n(Z),J=t("pcZC"),X=t.n(J),Q=t("upFR"),nn=t.n(Q);var en=t("d7EF"),tn=t.n(en);function on(n,e){var t=tn()(e,3),o=t[0],i=t[1],s=t[2],r=Math.sin(o)*s;return n[0]=r*Math.sin(i),n[1]=Math.cos(o)*s,n[2]=r*Math.cos(i),n}var sn=i.d.create();var rn=!1,an=["log","info","time","timeEnd"];function cn(){}var ln,un,fn=(ln=function(){if(window.console&&rn)return window.console;var n={};return an.forEach(function(e){n[e]=cn}),n}(),un={},an.forEach(function(n){un[n]=function(){return ln[n].apply(ln,arguments)}}),un.logHash=function(n,e){g()(e).forEach(function(n){ln.log("|  "+n+": "+e[n])}),ln.log(n)},un),dn=t("Dd8w"),pn=t.n(dn),vn=t("woOf"),xn=t.n(vn),mn=t("OvRC"),_n=t.n(mn);function hn(n,e){e.create=function(n){return function(){var e=_n()(n.prototype);return n.apply(e,arguments),e}}(e),n&&(e.prototype=_n()(n.prototype)),e.prototype.constructor=e;for(var t=arguments.length,o=Array(t>2?t-2:0),i=2;i<t;i++)o[i-2]=arguments[i];o.forEach(function(n){xn()(e.prototype,n)})}var yn=t("Y5yC"),gn=t.n(yn),bn=t("N4pm"),Pn=t.n(bn),Cn=t("6MN0"),wn=t.n(Cn),zn=t("MOeh"),An=t.n(zn),Bn=t("FDCe"),Sn=t.n(Bn),Fn=t("Ax8r"),Dn=t.n(Fn),Mn=t("Vthn"),In=t.n(Mn),Tn=["pointAt","getPointAt","setDistortion","focusAt","lineBetween","planeBetween"];function Nn(n,e){this.state=this.createState(e),this.resources=this.createResources(n,e),this.baseCommandParams=this.createBaseCommand(n),this.baseUniforms=this.createBaseUniforms(n),this.baseAttributes=this.createBaseAttributes(n),this.drawPoints=this.createDrawPointsCommand(n),this.drawFocusPoints=this.createDrawFocusPointsCommand(n),this.drawConnections=this.createDrawConnectionsCommand(n),this.drawConnectionPlanes=this.createDrawConnectionPlanesCommand(n)}function On(n,e,t){var o=t.texturePoint,i=t.textureFocus;Nn.call(this,n.regl,{texturePoint:o,textureFocus:i,maxPoints:e.count,maxFocusPoints:200,maxConnections:3*e.count}),this.ctx=this.getContext("3d")}function Rn(n,e,t){var o=t.texturePoint,i=t.textureFocus;Nn.call(this,n.regl,{texturePoint:o,textureFocus:i,maxPoints:e.countBrain}),this.ctx=this.getContext("3d")}function Ln(n,e,t){var o=t.texturePoint,i=t.textureFocus;Nn.call(this,n.regl,{texturePoint:o,textureFocus:i,maxPoints:e.countStream,maxConnections:2*e.countStream,mapBlendOffsets:function(n,e){return e/20}}),this.ctx=this.getContext("3d")}hn(null,Nn,{createState:function(n){return{cursor:{bufferName:"positionA",points:0,focusPoints:0,connections:0,connectionPlanes:0,maxPoints:n.maxPoints,maxFocusPoints:n.maxFocusPoints,maxConnections:n.maxConnections},sync:{bufferName:null,points:0,focusPoints:0,connections:0,connectionPlanes:0},transform:{model:i.b.create(),distortion:i.c.create()},texturePoint:{src:n.texturePoint},textureFocus:{src:n.textureFocus}}},createResources:function(n,e){var t,o,i=this.state,s=i.cursor;function r(){var e=new Float32Array(3*s.maxPoints);return{view:e,buffer:n.buffer({usage:"dynamic",type:"float",data:e})}}function a(e,t){if(!t)return null;var o=new Uint16Array(t);return{view:o,buffer:n.elements({usage:"dynamic",primitive:e,data:o})}}function c(e){var t=document.createElement("img"),o=n.texture();return t.onload=function(){o(t)},t.src=e,o}return{positionA:r(),positionB:r(),positionBlendOffset:(t=e.mapBlendOffsets||function(n,e){return Math.random()},o=new Float32Array(s.maxPoints).map(t),{view:o,buffer:n.buffer({usage:"static",data:o})}),texturePoint:c(i.texturePoint.src),textureFocus:c(i.textureFocus.src),focusPoints:a("points",s.maxFocusPoints),connections:a("lines",2*s.maxConnections),connectionPlanes:a("triangles",3*s.maxConnections)}},createBaseCommand:function(n){return{depth:{enable:!1},blend:{enable:!0,equation:"add",func:{src:"src alpha",dst:"one"}}}},createBaseUniforms:function(n){var e=this.state;return{tick:function(n){return n.tick},model:function(){return e.transform.model},color:n.prop("color"),fogRange:n.prop("fogRange"),positionBlend:n.prop("positionBlend"),positionBlendTarget:n.prop("positionBlendTarget"),positionBlendFactor:n.prop("positionBlendFactor"),positionScale:n.prop("positionScale"),positionDistortion:function(){return e.transform.distortion},cursorPosition:n.prop("cursorPosition"),cursorForce:n.prop("cursorForce")}},createBaseAttributes:function(n){var e=this.resources,t=e.positionA,o=e.positionB,i=e.positionBlendOffset;return{positionA:t.buffer,positionB:o.buffer,positionBlendOffset:i.buffer}},createDrawPointsCommand:function(n){var e=this.state,t=this.resources,o=n(pn()({},this.baseCommandParams,{vert:gn.a,frag:Pn.a,attributes:pn()({},this.baseAttributes),uniforms:pn()({},this.baseUniforms,{pointSize:n.prop("pointSize"),texture:t.texturePoint}),primitive:"points",count:function(){return e.cursor.points}}));return function(n){var t=e.cursor,i=e.sync,s=i.bufferName!==t.bufferName;return(i.points<t.points||s)&&(this.syncPositionBuffers(),i.points=t.points,i.bufferName=t.bufferName),o(n)}.bind(this)},createDrawFocusPointsCommand:function(n){var e=this.state,t=this.resources,o=t.focusPoints;if(!o)return null;var i=n(pn()({},this.baseCommandParams,{vert:wn.a,frag:Pn.a,attributes:pn()({},this.baseAttributes),uniforms:pn()({},this.baseUniforms,{pointSize:n.prop("pointSize"),texture:t.textureFocus}),elements:o.buffer,count:function(){return e.cursor.focusPoints}}));return function(n){var t=e.cursor,o=e.sync,s=o.bufferName!==t.bufferName;return(o.points<t.points||s)&&(this.syncPositionBuffers(),o.points=t.points,o.bufferName=t.bufferName),(o.focusPoints<t.focusPoints||s)&&(this.syncFocusPointsBuffer(),o.focusPoints=t.focusPoints,o.bufferName=t.bufferName),i(n)}.bind(this)},createDrawConnectionsCommand:function(n){var e=this.state,t=this.resources.connections;if(!t)return null;var o=n(pn()({},this.baseCommandParams,{vert:An.a,frag:Sn.a,attributes:pn()({},this.baseAttributes),uniforms:pn()({},this.baseUniforms),lineWidth:n.prop("lineWidth"),elements:t.buffer,count:function(){return 2*e.cursor.connections}}));return function(n){var t=e.cursor,i=e.sync,s=i.bufferName!==t.bufferName;return(i.points<t.points||s)&&(this.syncPositionBuffers(),i.points=t.points,i.bufferName=t.bufferName),(i.connections<t.connections||s)&&(this.syncConnectionsBuffer(),i.connections=t.connections,i.bufferName=t.bufferName),o(n)}.bind(this)},createDrawConnectionPlanesCommand:function(n){var e=this.state,t=this.resources.connectionPlanes;if(!t)return null;var o=n(pn()({},this.baseCommandParams,{vert:Dn.a,frag:In.a,attributes:pn()({},this.baseAttributes),uniforms:pn()({},this.baseUniforms),elements:t.buffer,count:function(){return 3*e.cursor.connectionPlanes}}));return function(n){var t=e.cursor,i=e.sync,s=i.bufferName!==t.bufferName;return(i.points<t.points||s)&&(this.syncPositionBuffers(),i.points=t.points,i.bufferName=t.bufferName),(i.connectionPlanes<t.connectionPlanes||s)&&(this.syncConnectionPlanesBuffer(),i.connectionPlanes=t.connectionPlanes,i.bufferName=t.bufferName),o(n)}.bind(this)},getActivePositionBuffer:function(){var n=this.state.cursor.bufferName;return this.resources[n]},swapReset:function(){"positionA"!==this.state.cursor.bufferName&&this.swapBuffers()},swapBuffers:function(){var n=this.state.cursor,e="positionA"===n.bufferName?"positionB":"positionA";this.syncPositionBuffers(),n.bufferName=e},syncPositionBuffers:function(){var n=this.getActivePositionBuffer();n.buffer.subdata(n.view)},syncFocusPointsBuffer:function(){var n=this.resources.focusPoints;n.buffer.subdata(n.view)},syncConnectionsBuffer:function(){var n=this.resources.connections;n.buffer.subdata(n.view)},syncConnectionPlanesBuffer:function(){var n=this.resources.connectionPlanes;n.buffer.subdata(n.view)},resetPoints:function(){var n=this.state,e=n.cursor,t=n.sync;e.points=0,t.points=0},resetFocusPoints:function(){var n=this.state,e=n.cursor,t=n.sync;e.focusPoints=0,t.focusPoints=0},resetConnections:function(){var n=this.state,e=n.cursor,t=n.sync;e.connections=0,t.connections=0},resetConnectionPlanes:function(){var n=this.state,e=n.cursor,t=n.sync;e.connectionPlanes=0,t.connectionPlanes=0},getContext:function(){var n=this,e={};return Tn.forEach(function(t){var o=n[t];o&&(e[t]=o.bind(n))}),e},pointAt:function(n,e,t){var o=this.state.cursor,i=this.getActivePositionBuffer(),s=3*o.points,r=s+1,a=s+2;i.view[s]=n,i.view[r]=e,i.view[a]=t,o.points++},getPointAt:function(n,e){var t=this.getActivePositionBuffer(),o=3*e,i=o+1,s=o+2;return n[0]=t.view[o],n[1]=t.view[i],n[2]=t.view[s],n},setDistortion:function(n){var e=this.state.cursor.bufferName;this.state.transform.distortion["positionA"===e?0:1]=n},focusAt:function(n){var e=this.state.cursor,t=this.resources.focusPoints,o=e.focusPoints;t.view[o]=n,e.focusPoints++},lineBetween:function(n,e){var t=this.state.cursor,o=this.resources.connections,i=2*t.connections,s=i+1;o.view[i]=n,o.view[s]=e,t.connections++},planeBetween:function(n,e,t){var o=this.state.cursor,i=this.resources.connectionPlanes,s=3*o.connectionPlanes,r=s+1,a=s+2;i.view[s]=n,i.view[r]=e,i.view[a]=t,o.connectionPlanes++}}),hn(Nn,On,{}),hn(Nn,Rn,{}),hn(Nn,Ln,{});var En=t("Rye7"),kn=t("IVnp"),qn=t.n(kn);function jn(n,e){En.a.call(this,n,xn()({bufferSize:512,drawArgs:{frag:qn.a}},e)),this.model=i.b.create(),this.draw=this.extendDrawCommand()}function Vn(n,e,t){jn.call(this,n.regl,{}),this.ctx=this.getContext("2d")}hn(En.a,jn,{extendDrawCommand:function(){var n=this.draw,e=this.model;return function(t){var o=t.color;n({model:e,tint:o,thickness:.5,miterLimit:2,adjustProjectedThickness:!0})}}}),hn(jn,Vn,{});var Gn=.001,Un=i.d.create(),Yn=i.d.create(),Wn=i.d.create();function Hn(n,e,t,o,s,r){var a=e.scene,c=e.cursor,l=s.activeLeaders,u=s.activeSequencesMap,f={cloud:On,brain:Rn,stream:Ln,lines:Vn};var d={transitionToSequence:function(n){var e=a.sequences,t=e[n],o=e[a.activeSequenceKey];if(t!==o){o&&fn.log("transitionOut",o.name);var i=o?o.transitionOut():x.a.resolve();return a.isTransitioning=!0,r.transitionOutScene(),t.willTransitionIn(),i.then(function(){return fn.log("transitionIn",t.name),r.transitionInScene(t.name),t.transitionIn()}).then(function(){a.activeSequenceKey=n,a.activeSequence=t,a.isTransitioning=!1})}},transitionInBlendAnimation:function(){return a.target.positionBlendFactor=1,b(300).then(function(){return a.target.leaderAlpha=1,b(400)})},transitionOutBlendAnimation:function(){return a.target.positionBlendFactor=0,a.target.leaderAlpha=0,b(700)},setCameraDistance:function(n){e.camera.target[2]=n},setCameraCoords:function(n,t,o){var s=e.camera.target;i.d.set(s.coords,n,t,o)},setCameraCenter:function(n,t,o){var s=e.camera.target;i.d.set(s.center,n,t,o)},setCursorHitPlane:function(n){var t=e.cursor.hitPlane;i.d.copy(t.normal,n.normal)},resetPositionBlend:function(){a.current.positionBlend=0,a.target.positionBlend=0},setPositionBlendSpeed:function(n){a.current.positionBlendSpeed=n},setPositionBlendDir:function(n){a.target.positionBlendDir=n},setCloudAlpha:function(n){a.target.cloudAlpha=n},setBrainAlpha:function(n){a.target.brainAlpha=n},setStreamAlpha:function(n){a.target.streamAlpha=n},resetPositions:function(n){f[n].resetPoints()},resetPositionsSwap:function(n){f[n].swapReset()},swapPositions:function(n){f[n].swapBuffers()},updatePositionsSpherical:function(n,e){var t=e.phiRange,o=e.phiNoise,s=e.thetaRange,r=e.thetaNoise,c=e.radiusRange,l=e.radiusNoise,u=e.distortion,d=e.scaleTransform,p=e.countFactor,v=f[n].ctx,x=Math.floor(a.count*(p||1)),m=Math.floor(20),h=Math.floor(x/20);fn.time("updatePositionsSpherical"),v.setDistortion(u);for(var y=0;y<h;y++)for(var g=y/(h-1),b=_(0,1,s[0],s[1],g+(2*Math.random()-1)*r),P=_(0,1,c[0],c[1],(.5*Math.sin(20*g)+.5)*(.3*Math.sin(34*g)+.7)+l*Math.random()),C=0;C<m;C++){var w=C/(m-1),z=_(0,1,t[0],t[1],w+(2*Math.random()-1)*o),A=on(Un,i.d.set(Yn,z,b,P));d&&i.d.multiply(A,A,d),v.pointAt(A[0],A[2],A[1])}fn.log("updatePositionsSpherical",x),fn.timeEnd("updatePositionsSpherical")},updatePositionsLandscape:function(n,e){var t=e.gridOffset,o=e.gridRows,i=e.gridCols,s=e.stepRow,r=e.stepCol,a=e.offsetRow,c=e.offsetCol,l=e.distortion,u=f[n].ctx,d=0;fn.time("updatePositionsLandscape"),u.setDistortion(l);for(var p=0;p<o;p++)for(var v=p/(o-1),x=0;x<i;x++){var m=x/(i-1),_=t[0]+(2*v-1)*o*.5*s,h=t[1]+Math.sin(10*(v+a))*Math.sin(3*m)*40+Math.sin(8*(m+c))*Math.sin(2*v)*40,y=t[2]+(2*m-1)*i*.5*r;u.pointAt(_,h,y),p>0&&u.lineBetween(d,d-i),x>0&&u.lineBetween(d,d-1),d++}fn.log("updatePositionsLandscape",d),fn.timeEnd("updatePositionsLandscape")},updatePositionsMesh:function(n,e,t){var s=t.scale,r=t.spacing,a=t.spacingOffset,c=t.noiseRange,l=t.distortion,u=t.hasLines,d=o[e],p=d.vertexPositions,v=d.linePositions,x=f[n].ctx,m=t.lineIndexOffset||0,_=v.length-m,h=f[n].state.cursor.points,y=0;fn.time("updatePositionsMesh"),x.setDistortion(l);for(var g=0;g<_;g++)for(var b=v[g+m],P=b[0]-1,C=b[1]-1,w=i.d.scale(Un,p[P],s),z=i.d.scale(Yn,p[C],s),A=null==r?2:Math.floor(i.d.distance(w,z)/r),B=0;B<A;B++){var S=B/(A-1)+a;S>1&&(S%=1);var F=i.d.lerp(Wn,w,z,S);F[0]+=Math.random()*c[0],F[1]+=Math.random()*c[1],F[2]+=Math.random()*c[2],x.pointAt(F[0],F[1],F[2]),y++,u&&B>0&&x.lineBetween(h+y-2,h+y-1)}fn.log("updatePositionsMesh",y),fn.timeEnd("updatePositionsMesh")},updatePositionsMeshPoint:function(n,e,t){var s=t.scale,r=t.lineIndex,a=t.noiseRange,c=t.distortion,l=o[e],u=l.vertexPositions,d=l.linePositions,p=f[n].ctx,v=d.length,x=0;fn.time("updatePositionsMeshPoint"),p.setDistortion(c);for(var m=0;m<v;m++){var _=d[m][r]-1,h=i.d.scale(Un,u[_],s);h[0]+=Math.random()*a[0],h[1]+=Math.random()*a[1],h[2]+=Math.random()*a[2],p.pointAt(h[0],h[1],h[2]),x++}fn.log("updatePositionsMeshPoint",x),fn.timeEnd("updatePositionsMeshPoint")},updatePositionsStream:function(n,e){var t=e.pathDirection,o=e.pathCount,i=e.segmentCount,s=e.offsetAxisStart,r=e.offsetRadiusStart,a=e.distortion,c=f[n].ctx,l=0;fn.time("updatePositionsStream"),c.setDistortion(a);for(var u=0;u<o;u++)for(var d=u/(o-1),p=d*Math.PI*2,v=s,x=d*r,m=0;m<i;m++){var _=m/(i-1);p+=.1,v+=(m%2==0?.1:3)*(.2*Math.random()+.8),x=14+20*(1-_)+120*_*_;var h=Math.cos(p+.2*Math.random())*x,y=Math.sin(p+.2*Math.random())*x,g=v*t;c.pointAt(g,y,h),m>0&&c.lineBetween(l-1,l),l++}fn.log("updatePositionsStream",l),fn.timeEnd("updatePositionsStream")},setFocusPointsAlpha:function(n){a.target.focusPointsAlpha=n},resetFocusPoints:function(n){f[n].resetFocusPoints()},updateFocusPoints:function(n,e){for(var t=f[n].state.cursor.points,o=f[n].ctx,i=0;i<e;i++){var s=Math.floor(Math.random()*(t-1));o.focusAt(s)}},resetConnections:function(n){var e=f[n];e.resetConnections(),e.resetConnectionPlanes()},setConnectionsAlpha:function(n){a.target.connectionsAlpha=n},updateConnections:function(n){var e=a.neighbors,t=e.offset,o=e.interval,i=e.connections,s=f.cloud.ctx,r=f.cloud.state.cursor.points;fn.time("updateConnections");for(var c=0;c<r;c++){var l=i[c];if(!l)break;for(var u=Math.min(n,l.length),d=u>=2,p=0;p<u;p++){var v=t+c*o,x=l[p];if(s.lineBetween(v,x),d&&p<u-1){var m=l[p+1];s.planeBetween(v,x,m)}}}fn.timeEnd("updateConnections")},setNeighborsOffset:function(n){a.neighbors.offset=n},findNeighbors:function(n,e){var t=a.neighbors,o=f.cloud.ctx,s=f.cloud.state.cursor.points,r=t.offset,c=t.interval,l=t.intervalSearch,u=t.max,d=Math.pow(n,2),p=[],v=Math.min(u,s);fn.time("findNeighbors");for(var x=r;x<s;x+=c){var m=o.getPointAt(Un,x);if(!m)break;var _=[];p.push(_);for(var h=0;h<v;h+=l){var y=Math.floor(Math.random()*s),g=o.getPointAt(Yn,y);if(i.d.sqrDist(m,g)<d&&_.push(y),_.length>=e)break}}return fn.timeEnd("findNeighbors"),t.connections=p,p}};var p={red:new Float32Array([1,0,0,1]),white:new Float32Array([1,1,1,1])},v={identity:new Float32Array([1,1,1]),inverted:new Float32Array([1,1,-1]),mirrored:new Float32Array([1,1,-1])},m={small:new Float32Array([40,10]),medium:new Float32Array([60,10]),large:new Float32Array([200,14])},h={wide:new Float32Array([40,500]),narrowClose:new Float32Array([90,170]),narrowInverse:new Float32Array([120,-40])};function y(n,e,t,o,i,s,r){for(var a=Math.abs(i-o),c=!0===r?-1:1,l=0;l<s;l++){var u=o+l/(s-1)*a*c,f=n+Math.cos(u)*t,d=e+Math.sin(u)*t;0===l?this.moveTo(f,d):this.lineTo(f,d)}}function P(n){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=t.regl.limits.lineWidthDims,i=a.current,s=i.positionBlend,r=i.positionBlendSpeed,l=i.positionBlendFactor,u=(a.target.positionBlendDir+1)/2,d={color:p.red,fogRange:h.wide,lineWidth:Math.min(2,o[1]),positionBlend:s*r,positionBlendTarget:u,positionBlendFactor:l,cursorPosition:c.current.intersection,cursorForce:c.current.force};!function(n,e){var t=a.current.connectionsAlpha,o=f.cloud;if(t<=Gn&&!e)return;n.color[3]=t,n.positionScale=v.identity,o.drawConnections(n),n.positionScale=v.inverted,o.drawConnections(n),n.color[3]=.5*t,n.positionScale=v.identity,o.drawConnectionPlanes(n),n.positionScale=v.inverted,o.drawConnectionPlanes(n)}(d,e),function(n,e){var t=a.current.cloudAlpha,o=f.cloud;n.color[3]=t,n.positionScale=v.identity,n.pointSize=m.medium,o.drawPoints(n),n.positionScale=v.inverted,o.drawPoints(n)}(d),function(n,e){var t=a.current,o=t.streamAlpha,i=t.positionBlend,s=f.stream;if(o<=Gn&&!e)return;n.color=p.red,n.color[3]=o,n.fogRange=h.wide,n.positionBlend=6*i,n.pointSize=m.small,n.cursorForce=.3*c.current.force,n.positionScale=v.identity,s.drawPoints(n),s.drawConnections(n),n.positionScale=v.mirrored,s.drawPoints(n),s.drawConnections(n)}(d,e),function(n,e){var t=a.current,o=t.brainAlpha,i=t.positionBlend,s=f.brain;if(o<=Gn&&!e)return;n.color[3]=o,n.fogRange=h.wide,n.positionBlend=5*i,n.positionScale=v.identity,n.pointSize=m.small,n.cursorForce=.4*c.current.force,s.drawPoints(n),n.positionScale=v.mirrored,s.drawPoints(n)}(d,e),function(n,e){var t=a.current.focusPointsAlpha,o=f.cloud;if(t<=Gn&&!e)return;n.color=p.white,n.color[3]=t,n.fogRange=h.wide,n.pointSize=m.large,n.cursorForce=c.current.force,n.positionScale=v.identity,o.drawFocusPoints(n),n.positionScale=v.mirrored,o.drawFocusPoints(n)}(d,e),z(d,e)}function C(n){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=a.current.positionBlendFactor;z({color:p.white,positionBlendFactor:t},e)}function z(n,e){var t=a.current.leaderAlpha,o=f.lines;t<=Gn&&!e||(n.color[3]=n.positionBlendFactor*t,o.draw(n))}return{preload:function(){return o.preload()},prerender:function(){var n=f.cloud;return fn.time("prerender"),n.ctx.pointAt(0,0),n.ctx.pointAt(0,1),n.ctx.pointAt(0,2),n.ctx.lineBetween(0,1),n.ctx.focusAt(0),n.ctx.planeBetween(0,1,2),P(0,!0),C(0,!0),fn.timeEnd("prerender"),b(1)},setupEntities:function(){fn.time("setupEntities"),g()(f).forEach(function(n){var e=f[n];f[n]=e.create(t,a,o)}),fn.timeEnd("setupEntities")},setupSequences:function(){fn.time("setupSequences");var n=[function(n,e){var t={phiRange:[.2*Math.PI,.8*Math.PI],phiNoise:.1,thetaRange:[0,2*Math.PI],thetaNoise:.2,radiusRange:[80,100],radiusNoise:.2,scaleTransform:[1,.5,1],distortion:4},o={phiRange:[.2*Math.PI,.8*Math.PI],phiNoise:0,thetaRange:[0,2*Math.PI],thetaNoise:0,radiusRange:[76,80],radiusNoise:0,scaleTransform:[1,.5,1],distortion:2},i={normal:[0,0,1],distance:0};return{name:"big-data",setup:function(){},willTransitionIn:function(){e.setCursorHitPlane(i),e.setCameraCenter(0,0,0),e.setCameraCoords(Math.PI/2,0,160)},transitionIn:function(){return b(1).then(function(){e.resetPositionsSwap("cloud"),e.resetPositions("cloud"),e.updatePositionsSpherical("cloud",t),e.swapPositions("cloud"),e.resetPositions("cloud"),e.updatePositionsSpherical("cloud",o),e.setCloudAlpha(1),e.setPositionBlendSpeed(1),e.setPositionBlendDir(1),e.transitionInBlendAnimation()})},transitionOut:function(){return e.setCloudAlpha(0),e.transitionOutBlendAnimation()},update:function(n){}}},function(n,e){var t={gridOffset:[2,0,0],gridRows:50,gridCols:50,stepRow:10,stepCol:10,offsetRow:0,offsetCol:0,distortion:1.5},o={gridOffset:[2,10,0],gridRows:50,gridCols:50,stepRow:10,stepCol:10,offsetRow:.05,offsetCol:.05,distortion:0},i={tick:0,tickInterval:15,tickMax:10,start:20,interval:5},s={normal:[0,1,0],distance:0};return{name:"data-collection",setup:function(){},willTransitionIn:function(){i.tick=0,e.setCursorHitPlane(s),e.setCameraCenter(0,0,0),e.setCameraCoords(.3*Math.PI,Math.PI,140)},transitionIn:function(){return b(1).then(function(){e.resetPositionsSwap("cloud"),e.resetPositions("cloud"),e.updatePositionsLandscape("cloud",t),e.swapPositions("cloud"),e.resetPositions("cloud"),e.resetConnections("cloud"),e.updatePositionsLandscape("cloud",o),e.resetFocusPoints("cloud"),e.updateFocusPoints("cloud",i.start),e.setCloudAlpha(1),e.setFocusPointsAlpha(1),e.setConnectionsAlpha(.6),e.setPositionBlendSpeed(3),e.setPositionBlendDir(1),e.transitionInBlendAnimation()})},transitionOut:function(){return e.setCloudAlpha(0),e.setFocusPointsAlpha(0),e.setConnectionsAlpha(0),e.transitionOutBlendAnimation()},update:function(n){n%i.tickInterval==0&&i.tick<=i.tickMax&&(i.tick++,e.updateFocusPoints("cloud",i.interval))}}},function(n,e){var t=n.neighbors,o={phiRange:[.15*Math.PI,.85*Math.PI],phiNoise:.1,thetaRange:[0,2*Math.PI],thetaNoise:0,radiusRange:[80,100],radiusNoise:.2,scaleTransform:[1,.5,1],distortion:4},i={phiRange:[.2*Math.PI,.8*Math.PI],phiNoise:0,thetaRange:[0,2*Math.PI],thetaNoise:0,radiusRange:[76,80],radiusNoise:.1,scaleTransform:[1,.5,1],distortion:2},s={tick:0,tickInterval:30,tickMax:8,start:12,interval:2},r=10,a=12,c=3,l={normal:[0,0,1],distance:0};return{name:"fed-engine",setup:function(){},willTransitionIn:function(){s.tick=0,e.setNeighborsOffset(0),e.setCursorHitPlane(l),e.setCameraCenter(0,0,0),e.setCameraCoords(.5*Math.PI,.85*Math.PI,80)},transitionIn:function(){return b(1).then(function(){e.resetPositionsSwap("cloud"),e.resetPositions("cloud"),e.updatePositionsSpherical("cloud",o),e.swapPositions("cloud"),e.resetPositions("cloud"),e.updatePositionsSpherical("cloud",i),e.resetFocusPoints("cloud"),e.updateFocusPoints("cloud",s.start),e.resetConnections("cloud"),e.setNeighborsOffset(0),e.findNeighbors(a,c),e.updateConnections(100),e.setCloudAlpha(1),e.setFocusPointsAlpha(1),e.setConnectionsAlpha(.5),e.setPositionBlendSpeed(2),e.setPositionBlendDir(1),e.transitionInBlendAnimation()})},transitionOut:function(){return e.setCloudAlpha(0),e.setFocusPointsAlpha(0),e.setConnectionsAlpha(0),e.transitionOutBlendAnimation()},update:function(n){n%s.tickInterval==0&&s.tick<=s.tickMax&&(s.tick++,e.updateFocusPoints("cloud",s.interval)),n%r==0&&t.offset<t.interval&&(e.setNeighborsOffset(t.offset+1),e.findNeighbors(a,c),e.updateConnections(100))}}},function(n,e){var t=n.neighbors,o={scale:36.2,spacing:.3,spacingOffset:0,noiseRange:[.6,.6,.6],distortion:1},i={scale:36,spacing:.3,spacingOffset:.8,noiseRange:[.4,.4,.4],distortion:1},s={pathDirection:1,pathCount:20,segmentCount:80,offsetAxisStart:30,offsetRadiusStart:4,distortion:2},r={pathDirection:1,pathCount:20,segmentCount:80,offsetAxisStart:10,offsetRadiusStart:6,distortion:.5},a=10,c=13,l=3,u={normal:[0,0,1],distance:0};return{name:"data-processed",setup:function(){},willTransitionIn:function(){e.setCursorHitPlane(u),e.setCameraCenter(30,0,0),e.setCameraCoords(.4*Math.PI,1.05*Math.PI,92)},transitionIn:function(){return b(1).then(function(){e.resetPositionsSwap("cloud"),e.resetPositions("cloud"),e.updatePositionsStream("cloud",s),e.swapPositions("cloud"),e.resetPositions("cloud"),e.updatePositionsStream("cloud",r),e.resetPositions("brain"),e.updatePositionsMesh("brain","meshBrain",o),e.swapPositions("brain"),e.resetPositions("brain"),e.updatePositionsMesh("brain","meshBrain",i),e.resetConnections("cloud"),e.setNeighborsOffset(0),e.findNeighbors(c,l),e.updateConnections(100),e.setCloudAlpha(.8),e.setBrainAlpha(1),e.setConnectionsAlpha(.5),e.setPositionBlendSpeed(3),e.setPositionBlendDir(1),e.transitionInBlendAnimation()})},transitionOut:function(){return e.setCloudAlpha(0),e.setBrainAlpha(0),e.setConnectionsAlpha(0),e.transitionOutBlendAnimation()},update:function(n){n%a==0&&t.offset<t.interval&&(e.setNeighborsOffset(t.offset+1),e.findNeighbors(c,l),e.updateConnections(100))}}},function(n,e){var t=n.neighbors,o={scale:36.2,spacing:.3,spacingOffset:0,noiseRange:[.5,.5,.5],distortion:0},i={scale:36,spacing:.3,spacingOffset:.8,noiseRange:[.4,.4,.4],distortion:0},s={pathDirection:1,pathCount:20,segmentCount:80,offsetAxisStart:30,offsetRadiusStart:4,distortion:2},r={pathDirection:1,pathCount:20,segmentCount:80,offsetAxisStart:10,offsetRadiusStart:6,distortion:.5},a={scale:36,spacing:null,spacingOffset:0,noiseRange:[0,0,0],distortion:0},c={scale:36,spacing:null,spacingOffset:0,noiseRange:[0,0,0],distortion:0,hasLines:!0},l=10,u=12,f=3,d={normal:[0,1,0],distance:0};return{name:"data-predictions",setup:function(){},willTransitionIn:function(){e.setNeighborsOffset(0),e.setCursorHitPlane(d),e.setCameraCenter(0,0,0),e.setCameraCoords(.375*Math.PI,.95*Math.PI,140)},transitionIn:function(){return b(1).then(function(){e.resetPositionsSwap("cloud"),e.resetPositions("cloud"),e.updatePositionsStream("cloud",s),e.swapPositions("cloud"),e.resetPositions("cloud"),e.updatePositionsStream("cloud",r),e.resetPositions("brain"),e.updatePositionsMesh("brain","meshBrain",o),e.swapPositions("brain"),e.resetPositions("brain"),e.updatePositionsMesh("brain","meshBrain",i),e.resetPositionsSwap("stream"),e.resetPositions("stream"),e.resetConnections("stream"),e.updatePositionsMesh("stream","meshBrainCircuit",a),e.swapPositions("stream"),e.resetPositions("stream"),e.resetConnections("stream"),e.updatePositionsMesh("stream","meshBrainCircuit",c),e.resetConnections("cloud"),e.setNeighborsOffset(0),e.findNeighbors(u,f),e.updateConnections(100),e.setCloudAlpha(1),e.setBrainAlpha(1),e.setStreamAlpha(1),e.setConnectionsAlpha(.8),e.setPositionBlendSpeed(3),e.setPositionBlendDir(1),e.transitionInBlendAnimation()})},transitionOut:function(){return e.setCloudAlpha(0),e.setBrainAlpha(0),e.setStreamAlpha(0),e.setConnectionsAlpha(0),e.transitionOutBlendAnimation()},update:function(n){n%l==0&&t.offset<t.interval&&(e.setNeighborsOffset(t.offset+1),e.findNeighbors(u,f),e.updateConnections(100))}}},function(n,e){var t={scale:36,spacing:null,spacingOffset:0,noiseRange:[0,0,0],distortion:0},o={scale:36,spacing:null,spacingOffset:0,noiseRange:[0,0,0],distortion:0,hasLines:!0},i={scale:36,lineIndex:0,noiseRange:[0,0,0],distortion:0},s={scale:36,lineIndex:1,noiseRange:[0,0,0],distortion:0},r={tick:0,tickInterval:30,tickMax:10,start:2,interval:2},a={normal:[0,1,0],distance:0};return{name:"prediction-actions",setup:function(){},willTransitionIn:function(){r.tick=0,e.setNeighborsOffset(0),e.setCursorHitPlane(a),e.setCameraCenter(-120,0,0),e.setCameraCoords(.2*Math.PI,1.1*Math.PI,130)},transitionIn:function(){return b(1).then(function(){e.resetPositionsSwap("stream"),e.resetPositions("stream"),e.resetConnections("stream"),e.updatePositionsMesh("stream","meshBrainCircuit",t),e.swapPositions("stream"),e.resetPositions("stream"),e.resetConnections("stream"),e.updatePositionsMesh("stream","meshBrainCircuit",o),e.resetPositionsSwap("cloud"),e.resetPositions("cloud"),e.updatePositionsMeshPoint("cloud","meshBrainCircuit",i),e.swapPositions("cloud"),e.resetPositions("cloud"),e.updatePositionsMeshPoint("cloud","meshBrainCircuit",s),e.resetFocusPoints("cloud"),e.updateFocusPoints("cloud",r.start),e.setStreamAlpha(1),e.setFocusPointsAlpha(1),e.setPositionBlendSpeed(3),e.setPositionBlendDir(1),e.transitionInBlendAnimation()})},transitionOut:function(){return e.setStreamAlpha(0),e.setFocusPointsAlpha(0),e.transitionOutBlendAnimation()},update:function(n){n%r.tickInterval==0&&r.tick<=r.tickMax&&(r.tick++,e.updateFocusPoints("cloud",r.interval))}}},function(n,e){var t={scale:4,spacing:null,spacingOffset:0,noiseRange:[0,0,0],distortion:0},o={scale:4,spacing:null,spacingOffset:0,noiseRange:[0,0,0],distortion:0,hasLines:!0},i={normal:[0,1,0],distance:0};return{name:"usecase-flows",setup:function(){},willTransitionIn:function(){e.setNeighborsOffset(0),e.setCursorHitPlane(i),e.setCameraCenter(0,0,0),e.setCameraCoords(.525*Math.PI,.5*Math.PI,120)},transitionIn:function(){return b(1).then(function(){e.resetPositionsSwap("stream"),e.resetPositions("stream"),e.resetConnections("stream"),e.updatePositionsMesh("stream","meshFlows",t),e.swapPositions("stream"),e.resetPositions("stream"),e.resetConnections("stream"),e.updatePositionsMesh("stream","meshFlows",o),e.setStreamAlpha(1),e.setPositionBlendSpeed(3),e.setPositionBlendDir(1),e.transitionInBlendAnimation()})},transitionOut:function(){return e.setStreamAlpha(0),e.transitionOutBlendAnimation()},update:function(n){}}}].filter(function(n,e){return null!=u[e]}).map(function(n){var e=n(a,d);return e.setup(),e});a.sequences=n,fn.timeEnd("setupSequences")},transitionTo:function(n){d.transitionToSequence(n)},transitionToPrev:function(){var n=a.sequences,e=a.activeSequenceKey-1;e<0&&(e=n.length-1),d.transitionToSequence(e)},transitionToNext:function(){var n=a.sequences,e=a.activeSequenceKey+1;e>n.length-1&&(e=0),d.transitionToSequence(e)},update:function(t){var o=a.current,s=a.target;a.activeSequence&&(w("connectionsAlpha",o,s,.08),w("focusPointsAlpha",o,s,.08),w("cloudAlpha",o,s,.08),w("brainAlpha",o,s,.08),w("streamAlpha",o,s,.08),w("leaderAlpha",o,s,.1),w("positionBlendFactor",o,s,.08),o.positionBlend+=.002*o.positionBlendDir,f.lines.reset(),function(t){var o=f.lines.ctx,s=e.viewport.size,r=n.requestSync("camera.projectionView");l.forEach(function(n){var e=n.tail,a=n.target;if(e.length){var c=i.d.transformMat4(Un,a,r),l=(e[0]/s[0]*2-1)*s[0]/2,u=(e[1]/s[1]*2-1)*s[1]/2,f=c[0]*s[0]/4,d=-c[1]*s[1]/4;o.lineWidth=3,o.strokeStyle="#fafafa",o.beginPath(),o.moveTo(l,u+6),o.lineTo(l,u),o.lineTo(l-40,u),o.lineTo(f,d),o.stroke(),o.lineWidth=4,o.beginPath(),y.call(o,f,d,3,0,.75*Math.PI*2,4),o.closePath(),o.stroke(),o.lineWidth=2,o.beginPath(),y.call(o,f,d,6+2*Math.sin(.1*t),0,.75*Math.PI*2,4),o.closePath(),o.stroke()}})}(t),a.activeSequence.update(t))},renderScene:P,renderUI:C}}var $n=!1,Zn=i.b.create(),Kn=i.b.create(),Jn=i.d.create();function Xn(n,e,t,o){var s,r={scene:e.scene},a=function(){for(var n={},e={},t=arguments.length,o=Array(t),i=0;i<t;i++)o[i]=arguments[i];return o.forEach(function(e){n[e]=[]}),n.add=function(e,t,o){var i=o||t,s=n[t],r=e[i]||e;s.push({context:e,fn:r})},n.run=function(e){for(var t=arguments.length,o=Array(t>1?t-1:0),i=1;i<t;i++)o[i-1]=arguments[i];n[e].forEach(function(n){n.fn.apply(n.context,o)})},n.defer=function(e,t,o){var i=o||t,s=n[t],r=e[i]||e;return new x.a(function(n,t){s.push({context:e,fn:r,resolve:n,reject:t})})},n.flush=function(e){for(var t=arguments.length,o=Array(t>1?t-1:0),i=1;i<t;i++)o[i-1]=arguments[i];return x.a.all(n[e].map(function(n){return n.fn.apply(n.context,o).then(function(e){return n.resolve(e)})})).then(function(){n[e].length=0})},n.registerResponder=function(n,t,o){e[n]={context:t,fn:o}},n.registerResponders=function(e,t,o){e.forEach(function(e){n.registerResponder(o+"."+e,t,t[e])})},n.requestSync=function(n){for(var t=arguments.length,o=Array(t>1?t-1:0),i=1;i<t;i++)o[i-1]=arguments[i];var s=e[n];if(!s)throw new Error("No responder for "+n);return s.fn.apply(s.context,o)},n}("inject","syncState","update","render","resize"),c=(s=0,m(null,function(){return a.run("update",s++)},function(){return a.run("render",s)},1/60*1e3)),u=M(),d=U(a,u),v=function(n,e,t){var o=t.regl,s=(r=i.b.create(),a=i.b.create(),c=i.b.create(),l=i.b.create(),u=i.b.create(),f=i.d.create(),d=i.d.set(i.d.create(),0,1,0),p=o({uniforms:{view:function(){var n=e.camera.current,t=n.coords,o=n.center,s=e.cursor.current.unitPosition,a=i.d.copy(sn,t);return a[0]=h(-Math.PI,Math.PI,a[0]-s[1]*Math.PI*.2),a[1]=h(2*-Math.PI,2*Math.PI,a[1]+s[0]*Math.PI*.2),on(f,a),i.d.add(f,f,o),i.b.lookAt(r,f,o,d),r},projection:function(){return a}}}),v=o({uniforms:{view:l,projection:function(){return u}}}),{get projectionView(){return i.b.multiply(c,a,r)},view:r,projection:a,setup:p,setupUI:v,update:function(n){var t=e.camera,o=t.current,i=t.target;A(z.vec3,"coords",o,i,.02),A(z.vec3,"center",o,i,.02)},resize:function(n,e){var t=e[0],o=e[1],s=t/o,r=.6*Math.PI;i.b.perspective(a,r,s,.01,2e3);var c=t/4,l=o/4;i.b.ortho(u,-c,c,l,-l,0,10)}});var r,a,c,l,u,f,d,p,v;return n.add(function(n){var t=e.viewport.size;s.resize(n,t)},"resize"),n.registerResponder("camera.projectionView",s,function(){return s.projectionView}),s}(a,u,d),y={preload:function(){return x.a.resolve()},texturePoint:W.a,textureFocus:$.a,meshBrain:K.a,meshBrainCircuit:X.a,meshFlows:nn.a},g=Hn(a,u,d,y,t,o);var P={awaitReady:function(){return P._inject},inject:function(){return P._inject=a.flush("inject",r).then(function(){return P.resize(),P.bindEvents(),P.willStart(),P.start()}).then(function(){P.didStart()})},willStart:function(){},start:function(){return g.preload().then(function(){return g.setupEntities()}).then(function(){return c.start()}).then(function(){return b(0)}).then(function(){return P.prerender()}).then(function(){return b(0)}).then(function(){return g.setupSequences()}).then(function(){return b(0)})},didStart:function(){},bindEvents:function(){P.resizeDebounce=C(120,P.resize),document.addEventListener("mousemove",P.mouseMove,!1),window.addEventListener("resize",P.resizeDebounce,!1),window.addEventListener("deviceorientation",P.deviceOrientation,!1),$n&&(P.mouseWheelStop=C(120,P.mouseWheelStop),P.mouseWheel=p()(document,P.mouseWheel,!0))},mouseWheel:function(n,e){u.viewport.isScrolling||u.scene.isTransitioning||(e>0?g.transitionToNext():g.transitionToPrev()),u.viewport.isScrolling=!0,P.mouseWheelStop()},mouseWheelStop:function(){u.viewport.isScrolling=!1},mouseMove:function(n){var e=n.clientX,t=n.clientY,o=u.cursor,s=u.viewport.size;i.c.set(o.target.position,e,t),i.c.set(o.target.unitPosition,e/s[0]*2-1,-t/s[1]*2+1),P.projectCursor(o)},deviceOrientation:function(n){var e=n.beta,t=n.gamma,o=u.cursor.target,s=o.position,r=o.unitPosition,a=u.viewport,c=a.isLandscape,l=a.size;c?i.c.set(r,_(-40,40,-1,1,e),_(-65,-5,-1,1,t)):i.c.set(r,_(-40,40,-1,1,t),_(65,15,-1,1,e)),i.c.set(s,(.5*r[0]+.5)*l[0],(.5*-r[1]+.5)*l[1])},resize:function(n){var e=u.viewport,t=e.resolution,o=e.size,s=e.center,r=e.bounds,c=window.innerWidth,l=window.innerHeight;i.c.set(o,c,l),i.c.set(s,c/2,l/2);var f=Math.min(1.5,window.devicePixelRatio),d=Math.round(c*f),p=Math.round(l*f);i.c.set(t,d,p),r[2]=o[0],r[3]=o[1],e.pixelRatioClamped=f,e.isLandscape=c>l,e.didResize=!0,a.run("resize",n)},projectCursor:function(n){var e=v.projection,t=v.view,o=u.viewport.bounds,s=i.b.multiply(Zn,e,t),r=i.b.invert(Kn,s);l()(n.origin,n.direction,n.target.position,o,r);var a=!!f()(n.target.intersection,n.origin,n.direction,n.hitPlane.normal,n.hitPlane.distance);n.hasIntersection=a,n.target.force=a?1:0},updateCursor:function(n){var e=u.cursor;A(z.vec2,"unitPosition",e.current,e.target,.1),A(z.vec3,"intersection",e.current,e.target,.1),w("force",e.current,e.target,.1)},update:function(n){P.updateCursor(n),v.update(n),g.update(n)},prerender:function(){v.setup(function(){g.prerender()})},render:function(n){var e=d.regl,t=d.postBuffers,o=d.commands.setupDrawScreen,s=u.viewport,r=s.resolution,a=s.pixelRatioClamped,c=s.pixelRatioNative,l=i.d.set(Jn,r[0],r[1],a);e.poll();var f;t.resize("full",r),f=.75/(2*c),t.resize("blurA",r,f),t.resize("blurB",r,f),t.get("full").use(function(){e.clear({color:[.05,.05,.05,1],depth:1}),v.setup(function(){g.renderScene(n)}),v.setupUI(function(){g.renderUI(n)})}),o(function(){P.renderBloomPasses(l),P.renderComposite(l,n)})},renderBloomPasses:function(n){for(var e=d.postBuffers,t=d.commands.drawGaussBlur,o=function(o){e.swap("blurB","blurA"),e.get("blurB").use(function(){var i=1*(1+Math.floor(o/2)),s=o%2==0?[i,0]:[0,i];t({color:e.get(0===o?"full":"blurA"),blurDirection:s,viewResolution:n})})},i=0;i<4;i++)o(i)},renderComposite:function(n,e){var t=d.postBuffers;(0,d.commands.drawScreen)({color:t.get("full"),bloom:t.get("blurB"),bloomIntensity:1.2,noiseIntensity:.2,tick:e,viewResolution:n})}};return a.add(P,"update"),a.add(P,"render"),P.inject(),{view:P,tasks:a,state:u,scene:g}}var Qn={"big-data":{groups:[{title:"Trusted By",name:"trusted-by",position:"top-right",leaderTarget:[-50,120,0],listType:"icons",list:[{icon:"ibm"},{icon:"moodys"},{icon:"jpmorgan"},{icon:"walmart"}]}]},"data-collection":{groups:[{title:"Turbo: Real-Time Powered AI-Powered Web Crawling Technology",name:"turbo",position:"top-center",leaderTarget:[200,20,180],listType:"info",list:[{info:"<b>1 Billion+</b> Public News Websites & Blogs"},{info:"<b>1 Minute</b> Average Latency"}]},{title:"Premium Content Providers",name:"premium-content",position:"bottom-center",leaderTarget:[80,10,-90],listType:"icons",list:[{icon:"dow"},{icon:"wordpress"},{icon:"tumblr"},{icon:"facebook"},{icon:"twitter"}]}]},"fed-engine":{groups:[{title:"Atlas: Comprehensive Entity And Event Extractor",name:"atlas",position:"top-right",leaderTarget:[60,40,0],listType:"info",list:[{info:"<b>30,000+</b> Global Public Companies"},{info:"<b>10,000+</b> Company Subsidiaries"},{info:"<b>5,000+</b> Products"},{info:"<b>4M+</b> Financial Phrases"},{info:"<b>100</b> Cryptocurrencies"},{info:"<b>35</b> Commodities"},{info:"<b>20</b> Foreign Exchanges"},{info:"<b>500+</b> Financial Events"}]}]},"data-processed":{groups:[{title:"Titan: Comprehensive Content Analytics",name:"titan",position:"bottom-right",leaderTarget:[40,25,-30],listType:"info",list:[{info:"<b>ANY:</b> Content (News, Filings, PDF, Text Files and more)"},{info:"<b>60+</b> Intelligent Insights Extracted Per Content"},{info:"<b>SENTIMENT:</b> Identifies Positive or Negative Stories"},{info:"<b>RELIABILITY:</b> Identifies Reliable Stories"},{info:"<b>IMPACT:</b> Identifies Important Stories"},{info:"<b>EXPOSURE</b> Identifies Trending Stories"}]}]},"data-predictions":{groups:[{title:"XYME: Machine-Learning Modeling Framework",name:"xyme",position:"top-right",leaderTarget:[20,55,-30],listType:"info",list:[{icon:"grid",info:"Connect Insights Extracted or Any Structured Data"},{icon:"plus",style:"compact"},{icon:"target",info:"Define Your Decisions"},{icon:"arrow",style:"compact"},{icon:"circuit",info:"Machine-Learning Models Computes Decisions"},{icon:"arrow",style:"compact"},{icon:"api",info:"Decision Generated, Evaluated, & Delivered"}]}]},"prediction-actions":{groups:[{title:"Accern FactSheet",name:"accern-facts",position:"bottom-right",leaderTarget:[-80,20,-50],listType:"info",list:[{info:"<b>$100B</b> Assets Under Analytics"},{info:"<b>$4M</b> Investment Raised"},{info:"<b>50%</b> Top 10 Global Banks Served"},{info:"<b>25</b> Data-Driven Employees"},{info:"<b>2014</b> Established"}]}]},"usecase-flows":{groups:[]}},ne={name:"main-visualization",components:{InfoOverlay:a},props:{sequences:Array},data:function(){return{overlays:Qn,activeLeaders:[],activeOverlay:{},leaderPositions:{}}},mounted:function(){var n=this,e=(this.$el,this.$refs),t={activeLeaders:this.activeLeaders,activeSequencesMap:this.activeSequencesMap},o=["transitionOutScene","transitionInScene"].reduce(function(e,t){return e[t]=n[t].bind(n),e},{});this.visualization=Xn(0,e,t,o)},computed:{activeSequencesMap:function(){return this.sequences.reduce(function(n,e){return n[e]=e,n},{})},overlaysOffsetRoot:function(){return this.$refs.main}},methods:{transitionOutScene:function(){this.activeOverlay={}},transitionInScene:function(n){var e=this,t=Qn[n],o=t.groups.map(function(n){return{name:n.name,tail:[],target:[]}});this.activeOverlay=t,this.activeLeaders.length=0,o.forEach(function(n){e.leaderPositions[n.name]=n,e.activeLeaders.push(n)})}}},ee={render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{ref:"main",staticClass:"main-visualization"},[t("div",{ref:"scene",staticClass:"main-visualization__scene"}),n._v(" "),t("div",{staticClass:"main-visualization__overlays"},[t("transition-group",{attrs:{name:"overlay",duration:800}},n._l(n.activeOverlay.groups,function(e){return t("div",{key:e.title},[t("info-overlay",{attrs:{model:e,leaderPosition:n.leaderPositions[e.name],offsetRoot:n.overlaysOffsetRoot}})],1)}))],1)])},staticRenderFns:[]};var te=t("VU/8")(ne,ee,!1,function(n){t("6MZY")},null,null).exports;o.a.config.productionTip=!1,window.__mountVisualization=function(n,e){var t=e.sequences,i=new o.a({el:n,components:{MainVisualization:te},data:{sequences:t},template:'<main-visualization ref="main" :sequences="sequences" />'}).$refs.main.visualization;return{transitionTo:function(n){i.view.awaitReady().then(function(){i.scene.transitionTo(n)})},transitionToPrev:function(){i.view.awaitReady().then(function(){i.scene.transitionToPrev()})},transitionToNext:function(){i.view.awaitReady().then(function(){i.scene.transitionToNext()})}}}},Vthn:function(n,e){n.exports="precision highp float;\n#define GLSLIFY 1\n\nuniform vec4 color;\n\nvarying float vOpacity;\n\nvoid main() {\n  gl_FragColor = vec4(color.rgb, color.a * vOpacity);\n}\n"},WeEh:function(n,e){},Y5yC:function(n,e){n.exports="precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 projection;\nuniform mat4 model;\nuniform mat4 view;\nuniform vec2 pointSize; // [size, scale]\nuniform vec2 fogRange; // [near, far]\n\nuniform float tick;\nuniform float positionBlend;\nuniform float positionBlendTarget;\nuniform float positionBlendFactor;\nuniform vec2 positionDistortion; // [A, B]\nuniform vec3 positionScale;\n\nuniform vec3 cursorPosition;\nuniform float cursorForce;\n\nattribute vec3 positionA;\nattribute vec3 positionB;\nattribute float positionBlendOffset;\n\nvarying float vOpacity;\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_4_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289_4_0(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute_4_1(vec3 x) {\n  return mod289_4_0(((x*34.0)+1.0)*x);\n}\n\nfloat snoise_4_2(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289_4_0(i); // Avoid truncation effects in permutation\n  vec3 p = permute_4_1( permute_4_1( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\n\n// blend equals positionBlendTarget for positionBlendFactor of 0\nfloat blend_1_3 (\n  float positionBlend_1_4, float positionBlendOffset_1_5,\n  float positionBlendTarget_1_6, float positionBlendFactor_1_7\n) {\n  float blend = positionBlend_1_4 + positionBlendOffset_1_5;\n  blend = sign(blend) * fract(blend);\n  blend *= blend * blend;\n  return mix(positionBlendTarget_1_6, blend, positionBlendFactor_1_7);\n}\n\n\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_6_8(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_6_8(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_6_9(vec4 x) {\n     return mod289_6_8(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_6_10(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise_6_11(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D_6_12 = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_6_13 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_6_13;\n  vec3 i1 = min( g_6_13.xyz, l.zxy );\n  vec3 i2 = max( g_6_13.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D_6_12.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_6_8(i);\n  vec4 p = permute_6_9( permute_6_9( permute_6_9(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D_6_12.wyz - D_6_12.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1_6_14 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0_6_15 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1_6_14.xy,h.z);\n  vec3 p3 = vec3(a1_6_14.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_6_10(vec4(dot(p0_6_15,p0_6_15), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_6_15 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0_6_15,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\n\nvec3 snoiseVec3_5_16( vec3 x ){\n\n  float s  = snoise_6_11(vec3( x ));\n  float s1 = snoise_6_11(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n  float s2 = snoise_6_11(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n  vec3 c = vec3( s , s1 , s2 );\n  return c;\n\n}\n\n\nvec3 curlNoise_5_17( vec3 p ){\n  \n  const float e = .1;\n  vec3 dx = vec3( e   , 0.0 , 0.0 );\n  vec3 dy = vec3( 0.0 , e   , 0.0 );\n  vec3 dz = vec3( 0.0 , 0.0 , e   );\n\n  vec3 p_x0 = snoiseVec3_5_16( p - dx );\n  vec3 p_x1 = snoiseVec3_5_16( p + dx );\n  vec3 p_y0 = snoiseVec3_5_16( p - dy );\n  vec3 p_y1 = snoiseVec3_5_16( p + dy );\n  vec3 p_z0 = snoiseVec3_5_16( p - dz );\n  vec3 p_z1 = snoiseVec3_5_16( p + dz );\n\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\n\n  const float divisor = 1.0 / ( 2.0 * e );\n  return normalize( vec3( x , y , z ) * divisor );\n\n}\n\n\n\n\nvec3 distort_2_18 (vec3 position_2_19, float scale_2_20, float magnitude_2_21) {\n  vec3 offset = curlNoise_5_17(position_2_19 * scale_2_20);\n  return position_2_19 + offset * magnitude_2_21;\n}\n\n\n\nvec3 cursorOffsetPosition_3_22 (\n  vec3 position_3_23, vec3 cursorPosition_3_24, float cursorForce_3_25,\n  float radius_3_26\n) {\n  vec3 cursorDiff = position_3_23 - cursorPosition_3_24;\n  float cursorDist = length(cursorDiff);\n  cursorDiff *= (1.0 - min(1.0, cursorDist / radius_3_26)) * cursorForce_3_25;\n  return cursorDiff;\n}\n\n\n\n\nvoid main() {\n  float blend = blend_1_3(positionBlend,\n    positionBlendOffset, positionBlendTarget, positionBlendFactor);\n\n  float distortion = mix(positionDistortion.x, positionDistortion.y, blend);\n  vec3 position = mix(positionA, positionB, blend) * positionScale;\n  position += cursorOffsetPosition_3_22(position, cursorPosition, cursorForce, 50.0);\n  position = distort_2_18(position, 0.05, distortion);\n  vec4 mvPosition = model * view * vec4(position, 1.0);\n\n  float n0 = snoise_4_2(position.xz * 0.01 + tick * 0.01);\n  float noiseFade = 3.0 *\n    (sin(n0 * 0.5) * 0.4 + 0.6) *\n    (sin(tick * 0.02) * 0.4 + 0.6) +\n    (sin(n0 * 1.5) * 0.4 + 0.6) * 0.8;\n\n  float fogFade = 1.0 - min(1.0,\n    smoothstep(fogRange.x, fogRange.y, length(mvPosition.xyz)));\n  float blendFade = mix(\n    positionBlendFactor * positionBlendFactor,\n    smoothstep(0.0, 0.5, 1.0 - abs(abs(blend) * 2.0 - 1.0)),\n    positionBlendFactor);\n\n  float size = pointSize[0];\n  float scale = pointSize[1];\n\n  vOpacity = noiseFade * fogFade * blendFade;\n  gl_PointSize = size * (scale / -mvPosition.z);\n  gl_Position = projection * mvPosition;\n}\n"},bqTp:function(n,e){n.exports="precision highp float;\n#define GLSLIFY 1\nuniform sampler2D color;\nuniform vec3 viewResolution; // [x, y, pxRatio]\nuniform vec2 blurDirection;\nvarying vec2 uv;\n\nvec4 blur5_1_0(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.3333333333333333) * direction;\n  color += texture2D(image, uv) * 0.29411764705882354;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;\n  return color; \n}\n\n\n\nvoid main() {\n  gl_FragColor = blur5_1_0(color, uv, viewResolution.xy, blurDirection);\n}\n"},hvnN:function(n,e,t){n.exports=t.p+"static/img/focus.0c3f7f9.png"},iFfL:function(n,e){n.exports={vertexPositions:[[-1.4,.22,.32],[-.53,.35,.85],[-1.28,.38,.39],[-1.16,.4,.5],[-1.07,.59,.36],[-.71,.8,.38],[-.46,.79,.49],[-.43,.86,.42],[-.42,.94,.18],[-.27,.94,.26],[-.34,.88,.37],[-.27,.87,.43],[-.33,.79,.52],[-.27,.68,.69],[-.41,.53,.76],[-.41,.42,.83],[-.36,.34,.9],[-.4,.11,.99],[-.65,.36,.81],[-.73,.32,.78],[-.81,.14,.83],[-1,.12,.78],[-.88,.28,.76],[-.95,.42,.64],[-.78,.42,.7],[-.69,.53,.67],[-.62,.44,.74],[-.5,.38,.76],[-.52,.51,.75],[-.71,.67,.54],[-.49,.61,.68],[-.42,.7,.6],[-.7,.7,.48],[-.85,.65,.5],[-.81,.55,.63],[-1,.56,.52],[-1.08,.37,.62],[-1.09,.2,.7],[-1.17,.31,.58],[-1.3,.27,.48],[-.16,.22,1.04],[-.45,.25,.92],[-.32,.52,.79],[-.18,.66,.7],[-.15,.82,.48],[-.16,.92,.3],[-.26,.96,.17],[-.1,.98,.19],[.03,.99,.13],[.08,.96,.04],[-.15,.52,.8],[.01,.79,.53],[-.06,.85,.43],[-.02,.92,.3],[.12,.92,.26],[.16,.98,.14],[.07,.23,1.06],[.02,.36,1.02],[.01,.45,.92],[-.05,.51,.87],[.07,.58,.83],[.12,.67,.73],[.05,.71,.68],[.15,.76,.61],[.19,.89,.37],[.32,.9,.29],[.35,.93,.16],[.46,.87,.24],[.64,.8,.27],[.5,.82,.4],[.6,.77,.4],[.44,.79,.53],[.31,.85,.45],[.25,.81,.54],[.27,.75,.66],[.64,.72,.5],[.76,.77,.19],[.75,.69,.39],[.95,.47,.39],[.95,.39,.58],[.83,.54,.52],[.68,.58,.48],[.6,.59,.77],[.44,.68,.71],[.31,.69,.76],[.2,.65,.78],[.11,.38,1.01],[-.97,.04,.81],[-.72,-.06,.88],[-.61,.02,.92],[-.58,.2,.9],[-.52,.1,.96],[-.49,-.02,.93],[-.37,.01,1.02],[-.26,.08,1.05],[-.28,.17,1.03],[-.15,.11,1.07],[.05,.16,1.07],[.25,.16,1.06],[.45,.29,1.08],[.34,.06,1.08],[.33,-.02,1.12],[.21,.03,1.1],[-.05,-.03,1.13],[-.2,-.19,1.08],[-.51,-.12,.95],[-.8,-.33,.83],[-.98,-.4,.73],[-.79,-.16,.85],[-1.01,-.23,.78],[-1.01,-.01,.78],[-1.18,-.16,.69],[.24,.31,1.06],[.28,.54,.92],[.34,.48,.97],[.57,.43,.96],[.6,.49,.91],[.42,.62,.83],[.62,.53,.82],[.78,.49,.68],[.91,.36,.7],[.91,.27,.8],[.82,.43,.75],[.73,.46,.82],[.63,.35,.97],[.69,.26,.98],[.56,.14,1.05],[.53,.29,1.05],[.48,.35,1.05],[.36,.37,1.04],[-.22,-.29,1.09],[-.08,-.3,1.06],[.24,-.19,1.14],[.4,-.19,1.13],[.55,-.14,1.1],[.61,-.04,1.09],[.68,.03,1.03],[.71,.13,1],[.77,.22,.96],[.84,.04,.95],[.91,-.04,.95],[.75,-.03,1.04],[.53,-.27,1.08],[.48,-.35,1.06],[.34,-.32,1.07],[.29,-.36,1.07],[.18,-.29,1.07],[.09,-.39,1.09],[-.23,-.42,1.04],[-.28,-.49,.99],[-.47,-.49,.94],[-.49,-.57,.92],[-.59,-.6,.81],[-.61,-.4,.91],[-.49,-.39,.98],[-.3,-.29,1.05],[.04,-.22,1.13],[-1.11,-.31,.69],[-1.43,.08,.18],[-1.36,.23,.11],[-1.31,.38,.17],[-1.29,.44,.14],[-1.13,.63,.12],[-.95,.76,.13],[-.73,.86,.21],[-.7,.84,.31],[-.87,.79,.24],[-1.01,.7,.27],[-1.22,.56,.21],[-1.23,.49,.26],[-1.45,.08,.29],[-1.39,0,.19],[-1.42,-.1,.24],[-1.38,0,.46],[-1.32,.07,.5],[-1.35,.16,.49],[-1.34,-.21,.17],[-1.37,-.18,.33],[-1.36,-.06,.52],[-1.33,-.15,.53],[-1.29,-.25,.35],[-1.35,-.28,.17]],vertexNormals:[],vertexUVs:[],facePositions:[],faceNormals:[],faceUVs:[],linePositions}},iTbv:function(n,e,t){n.exports=t.p+"static/img/particle.330a818.png"},pcZC:function(n,e){n.exports={vertexPositions:[[0,-.4,-1.1],[0,-.4,-1.4],[-.6,-.2,-1.3],[-1,-.2,-1.3],[-1,-.3,-1.9],[-2.5,-.3,-1.9],[-2.2,.2,-1.7],[-2.6,.2,-1.7],[-3.1,-.2,-2.1],[-3.9,-.2,-2.1],[-3.6,-.2,-2.5],[-3.9,-.2,-2.5],[-4.2,-.5,-2.8],[-6,-.5,-2.8],[-6.4,-.7,-3],[-7,-.7,-3],[-6.9,-.2,-2.8],[-7.3,-.2,-2.8],[-.1,-.3,-1.1],[-.1,-.3,-1.2],[-.7,-.1,-1.2],[-1.1,-.1,-1.2],[-1.1,-.2,-1.8],[-2.3,-.2,-1.8],[-2,.3,-1.8],[-2.7,.3,-1.8],[-3.2,-.1,-1.7],[-4,-.1,-1.7],[-3.7,-.1,-2.1],[-4,-.1,-2.1],[-4.3,-.3,-2.4],[-5.8,-.3,-2.4],[-5.9,-.2,-2.1],[-6.7,-.2,-2.1],[-6.6,.3,-1.9],[-7,.3,-1.9],[-6.9,.6,-1.5],[-6.6,.6,-1.5],[-6.6,.2,-1.3],[-5.7,.2,-1.3],[-5.7,.4,-1.5],[-4.2,.4,-1.5],[-4.2,.6,-1.5],[-3.9,.6,-1.5],[-3.9,.2,-1.2],[-3.1,.2,-1.2],[-3.1,.7,-1.1],[-2.4,.7,-1.1],[-2.2,.1,-1.4],[-1.2,.1,-1.4],[-1.2,.3,-1.1],[-.6,.3,-1.1],[-.2,-.1,-1.2],[-.1,-.1,-1.1],[.1,.6,-.7],[0,.6,-.7],[-.6,.7,-.9],[-.8,.7,-.9],[-1,.5,-1],[-1.7,.5,-1],[-1.9,.2,-.6],[-2.9,.2,-.6],[-3,.5,-.7],[-4,.5,-.7],[-4.3,.3,-.7],[-5.4,.3,-.7],[-6,.2,-.8],[-7.1,.2,-.8],[0,.1,-1],[-.1,.1,-1.1],[-.4,.4,-1.1],[-1.3,.4,-1.1],[-1.3,.2,-1.3],[-1.9,.2,-1.3],[-2.1,.7,-1],[-3.2,.7,-1],[-3.2,.3,-1.2],[-3.8,.3,-1.2],[-3.8,.7,-1.4],[-4.4,.7,-1.4],[-4.4,.4,-1.4],[-5.5,.4,-1.4],[-5.5,.5,-1.2],[-6.3,.5,-1.2],[-6.3,.6,-1.4],[-6.9,.6,-1.4],[0,.8,-.5],[-.1,.9,-.6],[-.6,.8,-.7],[-.8,.8,-.7],[-.9,.8,-.5],[-1.6,.7,-.5],[-2,.3,-.5],[-2.9,.3,-.5],[-2.9,.3,-.9],[-3.9,.3,-.9],[-4.2,.1,-1],[-5.7,.1,-1],[-5.8,.4,-.7],[-7.8,.4,-.7],[.1,.9,-.4],[0,.9,-.4],[-.5,.8,-.6],[-.8,.8,-.6],[-.9,.9,-.3],[-1.6,.9,-.3],[-2,.4,-.4],[-2.9,.4,-.4],[-2.8,.6,-.3],[-3.8,.6,-.3],[-4,.3,-.4],[-5.5,.3,-.4],[-5.7,.5,-.5],[-7.7,.5,-.5],[.1,.9,-.3],[0,1,-.3],[-.3,1.1,-.1],[-.6,1.1,-.1],[-.7,.8,-.1],[-1.4,.8,-.1],[-1.9,.4,-.1],[-2.6,.4,-.1],[-2.6,.6,-.1],[-3.6,.6,-.1],[-3.6,.1,0],[-5.1,.1,0],[-5.8,.7,-.1],[-6.9,.7,-.1]],vertexNormals:[],vertexUVs:[],facePositions:[],faceNormals:[],faceUVs:[],linePositions:[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[38,37],[39,38],[40,39],[41,40],[42,41],[43,42],[44,43],[45,44],[46,45],[47,46],[48,47],[49,48],[50,49],[51,50],[52,51],[53,52],[54,53],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100],[101,102],[102,103],[103,104],[104,105],[105,106],[106,107],[107,108],[108,109],[109,110],[110,111],[111,112],[112,113],[113,114],[115,116],[116,117],[117,118],[118,119],[119,120],[120,121],[121,122],[122,123],[123,124],[124,125],[125,126],[126,127],[127,128]]}},rVZh:function(n,e){n.exports="precision mediump float;\n#define GLSLIFY 1\nuniform sampler2D color;\nvarying vec2 uv;\nvoid main() {\n  gl_FragColor = texture2D(color, uv);\n}\n"},upFR:function(n,e){n.exports={vertexPositions:[[11.7,14.9,-11.3],[12.6,16.7,-11.3],[14.6,17.9,-11.3],[17.1,18.7,-11.3],[19.8,19.3,-11.3],[22.7,19.8,-11.3],[25.5,20.4,-11.3],[28.1,21.3,-11.3],[30.2,22.5,-11.3],[31.6,24.2,-11.3],[32.2,26.6,-11.3],[32.3,29.8,-11.3],[11.7,14.9,-11.3],[12.3,16.2,-11.5],[13.7,17.1,-12],[15.5,17.7,-12.7],[17.5,18.2,-13.4],[19.5,18.6,-14.1],[21.5,19.1,-14.8],[23.3,19.7,-15.5],[24.8,20.6,-16],[25.7,21.9,-16.4],[26.2,23.7,-16.6],[26.3,26.1,-16.6],[11.7,14.9,-11.3],[12.5,16.9,-11.9],[14.2,18.3,-13.4],[16.4,19.2,-15.3],[18.9,19.9,-17.3],[21.4,20.5,-19.4],[23.9,21.3,-21.5],[26.1,22.2,-23.4],[28,23.6,-24.9],[29.2,25.6,-26],[29.8,28.3,-26.4],[29.8,32,-26.5],[11.7,14.9,-11.3],[12.1,16.4,-12],[12.9,17.5,-13.4],[14,18.2,-15.3],[15.2,18.7,-17.4],[16.5,19.2,-19.6],[17.7,19.7,-21.7],[18.8,20.5,-23.6],[19.7,21.5,-25.2],[20.3,23,-26.3],[20.6,25.1,-26.8],[20.7,27.9,-26.8],[11.7,14.9,-11.3],[11.8,16.4,-12],[12.1,17.4,-13.7],[12.5,18.1,-15.8],[12.9,18.6,-18.2],[13.3,19.1,-20.6],[13.7,19.6,-22.9],[14.1,20.4,-25.1],[14.4,21.4,-26.9],[14.6,22.9,-28],[14.7,24.9,-28.6],[14.7,27.7,-28.7],[11.7,14.9,-11.3],[11.5,16.7,-12.2],[11.2,18,-14.2],[10.7,18.8,-16.8],[10.2,19.4,-19.6],[9.7,20,-22.5],[9.2,20.6,-25.3],[8.7,21.5,-27.9],[8.4,22.7,-30.1],[8.1,24.5,-31.5],[8,27,-32.1],[8,30.3,-32.2],[11.7,14.9,-11.3],[11.2,16.8,-12.1],[10.1,18.2,-14],[8.7,19.1,-16.4],[7.2,19.7,-19.1],[5.6,20.3,-21.8],[4.1,21,-24.5],[2.6,21.9,-26.9],[1.5,23.3,-28.9],[.7,25.2,-30.3],[.4,27.8,-30.9],[.3,31.3,-31],[11.7,14.9,-11.3],[10.9,16.8,-11.9],[9.2,18.2,-13.3],[7.1,19.1,-15.1],[4.8,19.7,-17.1],[2.4,20.3,-19.1],[0,21,-21.1],[-2.2,21.9,-22.9],[-4,23.3,-24.4],[-5.1,25.2,-25.4],[-5.7,27.8,-25.8],[-5.8,31.4,-25.9],[11.5,13.5,-9.6],[10.6,15.2,-9.9],[8.8,16.3,-10.6],[6.5,17.1,-11.4],[4,17.7,-12.3],[1.4,18.2,-13.3],[-1.2,18.8,-14.2],[-3.5,19.6,-15.1],[-5.4,20.8,-15.7],[-6.7,22.5,-16.2],[-7.3,24.8,-16.4],[-7.4,27.9,-16.5],[11.5,13.5,-9.6],[10.6,15.2,-9.6],[8.7,16.3,-9.6],[6.2,17.1,-9.6],[3.6,17.7,-9.6],[.8,18.2,-9.6],[-1.9,18.8,-9.6],[-4.4,19.6,-9.6],[-6.4,20.8,-9.6],[-7.7,22.4,-9.6],[-8.4,24.7,-9.6],[-8.5,27.8,-9.6],[11,11.7,-6.9],[10.1,13.7,-6.5],[8,15.1,-5.8],[5.3,16,-4.8],[2.3,16.7,-3.7],[-.7,17.3,-2.6],[-3.7,18,-1.5],[-6.4,19,-.5],[-8.6,20.3,.3],[-10.1,22.3,.8],[-10.8,25,1.1],[-10.9,28.6,1.1],[11.7,14.9,-11.3],[10.9,16.8,-10.6],[9.3,18.2,-9.3],[7.1,19,-7.5],[4.8,19.7,-5.5],[2.4,20.3,-3.5],[.1,21,-1.5],[-2.1,21.9,.3],[-3.9,23.2,1.8],[-5,25.1,2.7],[-5.6,27.7,3.2],[-5.7,31.3,3.3],[11,11.7,-6.9],[10.6,13.3,-6.2],[9.8,14.3,-4.7],[8.7,15.1,-2.8],[7.4,15.6,-.7],[6.2,16,1.5],[4.9,16.6,3.6],[3.8,17.3,5.6],[2.9,18.4,7.2],[2.3,19.9,8.2],[2,22,8.7],[2,24.8,8.8],[11.7,14.9,-11.3],[11.5,16.9,-10.3],[11.1,18.3,-8.1],[10.6,19.2,-5.3],[10.1,19.9,-2.2],[9.5,20.5,1],[9,21.2,4.2],[8.5,22.1,7],[8,23.5,9.3],[7.8,25.4,10.9],[7.6,28.1,11.6],[7.6,31.8,11.7],[11.7,14.9,-11.3],[11.8,16.7,-10.4],[12.2,17.9,-8.5],[12.6,18.7,-6],[13.1,19.3,-3.3],[13.6,19.8,-.5],[14.1,20.4,2.3],[14.5,21.2,4.8],[14.9,22.5,6.9],[15.1,24.2,8.2],[15.2,26.5,8.9],[15.2,29.7,9],[11.7,14.9,-11.3],[12.1,16.6,-10.5],[13.1,17.8,-8.9],[14.3,18.5,-6.8],[15.6,19.1,-4.5],[17,19.6,-2.1],[18.4,20.2,.3],[19.6,21.1,2.4],[20.6,22.2,4.2],[21.3,23.9,5.3],[21.6,26.2,5.9],[21.6,29.3,6],[11.7,14.9,-11.3],[12.3,16.4,-10.8],[13.5,17.4,-9.7],[15.1,18,-8.4],[16.9,18.5,-6.9],[18.7,19,-5.4],[20.5,19.5,-3.9],[22.1,20.2,-2.5],[23.5,21.2,-1.4],[24.4,22.6,-.6],[24.8,24.6,-.3],[24.8,27.3,-.2],[11.7,14.9,-11.3],[12.5,16.6,-11],[14.3,17.8,-10.3],[16.6,18.5,-9.5],[19.1,19.1,-8.6],[21.7,19.6,-7.6],[24.2,20.2,-6.7],[26.6,21.1,-5.9],[28.4,22.2,-5.2],[29.7,23.9,-4.7],[30.3,26.2,-4.5],[30.4,29.3,-4.5],[-16.5,20.6,-4.7],[-15.8,22.1,-4.9],[-14.3,23.1,-5.2],[-12.4,23.7,-5.7],[-10.2,24.2,-6.1],[-8,24.7,-6.6],[-5.9,25.2,-7.1],[-3.9,25.9,-7.6],[-2.3,26.9,-7.9],[-1.2,28.3,-8.2],[-.7,30.3,-8.3],[-.6,32.9,-8.3],[-16.5,20.6,-4.7],[-15.7,22.3,-5.2],[-14.2,23.5,-6.2],[-12.2,24.3,-7.4],[-10,24.8,-8.8],[-7.8,25.4,-10.3],[-5.5,26,-11.7],[-3.5,26.8,-13],[-1.9,28,-14.1],[-.8,29.7,-14.8],[-.3,32,-15.1],[-.2,35.2,-15.1],[-16.5,20.6,-4.7],[-16,22.3,-5.4],[-14.9,23.4,-6.8],[-13.5,24.2,-8.6],[-12,24.7,-10.6],[-10.4,25.2,-12.7],[-8.8,25.8,-14.7],[-7.4,26.6,-16.6],[-6.2,27.8,-18.1],[-5.5,29.4,-19.1],[-5.1,31.7,-19.6],[-5,34.8,-19.7],[-16.5,20.6,-4.7],[-16.3,22.1,-5.4],[-15.8,23.1,-6.9],[-15.2,23.7,-8.8],[-14.6,24.2,-10.9],[-13.9,24.7,-13],[-13.2,25.2,-15.1],[-12.6,25.9,-17.1],[-12.2,26.9,-18.7],[-11.8,28.3,-19.7],[-11.7,30.3,-20.2],[-11.6,32.9,-20.3],[-16.5,20.6,-4.7],[-16.5,22.1,-5.5],[-16.6,23.1,-7],[-16.7,23.7,-9],[-16.8,24.2,-11.2],[-16.9,24.7,-13.4],[-17,25.2,-15.6],[-17.1,25.9,-17.7],[-17.2,26.9,-19.3],[-17.2,28.3,-20.4],[-17.2,30.3,-20.9],[-17.2,32.9,-21],[-16.5,20.6,-4.7],[-16.8,22.1,-5.5],[-17.5,23.1,-7.1],[-18.4,23.7,-9.2],[-19.4,24.2,-11.6],[-20.3,24.7,-14],[-21.3,25.2,-16.3],[-22.2,25.9,-18.5],[-23,26.9,-20.2],[-23.4,28.3,-21.4],[-23.7,30.3,-21.9],[-23.7,32.9,-22],[-10.9,15.1,-12.1],[-11.3,16.6,-12.6],[-12.4,17.6,-13.7],[-13.7,18.2,-15.2],[-15.2,18.7,-16.8],[-16.7,19.2,-18.5],[-18.2,19.7,-20.1],[-19.6,20.4,-21.6],[-20.7,21.4,-22.8],[-21.5,22.8,-23.6],[-21.8,24.8,-24],[-21.9,27.4,-24],[-16.5,20.6,-4.7],[-17.2,22.2,-5.1],[-18.7,23.3,-5.9],[-20.7,24.1,-6.9],[-22.9,24.6,-8],[-25.1,25.1,-9.2],[-27.3,25.7,-10.3],[-29.3,26.5,-11.4],[-31,27.6,-12.2],[-32,29.2,-12.8],[-32.6,31.4,-13.1],[-32.6,34.3,-13.1],[-16.5,20.7,-4.8],[-17.2,22,-4.8],[-18.5,22.8,-5],[-20.3,23.4,-5.2],[-22.2,23.9,-5.5],[-24.2,24.3,-5.7],[-26.2,24.7,-6],[-27.9,25.3,-6.2],[-29.4,26.2,-6.4],[-30.4,27.5,-6.5],[-30.8,29.2,-6.6],[-30.9,31.6,-6.6],[-15.6,13.7,-3.3],[-16.3,15.4,-3.1],[-18.1,16.5,-2.7],[-20.2,17.2,-2.3],[-22.6,17.8,-1.7],[-25.1,18.3,-1.2],[-27.6,18.9,-.6],[-29.8,19.7,-.1],[-31.6,20.8,.3],[-32.8,22.4,.6],[-33.4,24.6,.7],[-33.5,27.6,.7],[-16.5,20.7,-4.8],[-17.1,22,-4.4],[-18.2,22.8,-3.7],[-19.7,23.4,-2.7],[-21.3,23.9,-1.7],[-23,24.3,-.6],[-24.7,24.7,.5],[-26.2,25.3,1.4],[-27.4,26.2,2.2],[-28.3,27.5,2.8],[-28.6,29.2,3],[-28.7,31.6,3],[-16.5,20.6,-4.7],[-17,22.1,-4.1],[-18,23.2,-2.8],[-19.2,23.9,-1.2],[-20.6,24.4,.7],[-22.1,24.9,2.6],[-23.5,25.4,4.5],[-24.8,26.2,6.2],[-25.9,27.2,7.6],[-26.6,28.7,8.5],[-26.9,30.8,8.9],[-27,33.6,9],[-15.6,13.7,-3.3],[-15.8,15.2,-2.6],[-16.2,16.2,-1.1],[-16.8,16.8,.7],[-17.5,17.3,2.8],[-18.2,17.8,5],[-18.8,18.3,7.1],[-19.4,19,9],[-19.9,20,10.6],[-20.2,21.4,11.7],[-20.4,23.4,12.1],[-20.4,26,12.2],[-16.5,20.6,-4.7],[-16.4,22.2,-3.9],[-16.4,23.3,-2.2],[-16.3,24,0],[-16.2,24.6,2.4],[-16,25.1,4.9],[-15.9,25.6,7.3],[-15.8,26.4,9.5],[-15.7,27.5,11.4],[-15.7,29.1,12.6],[-15.7,31.2,13.1],[-15.7,34.2,13.2],[-10.9,15.1,-12.1],[-10.6,16.7,-11.3],[-9.9,17.8,-9.7],[-9,18.6,-7.7],[-8.1,19.1,-5.5],[-7.1,19.6,-3.1],[-6.2,20.2,-.9],[-5.3,21,1.2],[-4.6,22.1,2.9],[-4.2,23.7,4],[-3.9,25.8,4.6],[-3.9,28.8,4.7],[-16.5,20.7,-4.8],[-16.1,21.9,-4.3],[-15.3,22.7,-3.4],[-14.1,23.3,-2.1],[-12.9,23.7,-.8],[-11.6,24.1,.6],[-10.3,24.5,2],[-9.2,25.1,3.2],[-8.3,25.9,4.3],[-7.6,27.1,4.9],[-7.3,28.8,5.2],[-7.3,31,5.3],[-16.5,20.6,-4.7],[-15.8,22.1,-4.4],[-14.4,23.2,-3.6],[-12.5,23.9,-2.7],[-10.5,24.4,-1.6],[-8.4,24.9,-.5],[-6.3,25.4,.5],[-4.4,26.1,1.5],[-2.9,27.2,2.3],[-1.8,28.7,2.9],[-1.4,30.7,3.1],[-1.3,33.5,3.1],[-10.9,15.1,-12.1],[-10.1,16.7,-12],[-8.5,17.7,-11.8],[-6.3,18.5,-11.5],[-4,19,-11.2],[-1.6,19.5,-10.9],[.8,20,-10.6],[2.9,20.8,-10.3],[4.7,21.8,-10.1],[5.8,23.4,-9.9],[6.4,25.5,-9.8],[6.5,28.3,-9.8],[13.7,19.5,-11.5],[14.4,21.3,-11.5],[16.1,22.5,-11.5],[18.1,23.3,-11.5],[20.4,23.9,-11.5],[22.8,24.4,-11.5],[25.1,25,-11.5],[27.2,25.9,-11.5],[29,27.1,-11.5],[30.1,28.8,-11.5],[30.6,31.2,-11.5],[30.7,34.4,-11.5],[13.7,19.5,-11.5],[14.2,20.8,-11.7],[15.4,21.7,-12.1],[16.8,22.4,-12.6],[18.5,22.8,-13.2],[20.1,23.2,-13.8],[21.8,23.7,-14.4],[23.3,24.3,-15],[24.5,25.2,-15.4],[25.3,26.5,-15.7],[25.7,28.3,-15.9],[25.8,30.7,-15.9],[13.7,19.5,-11.5],[14.3,21.5,-12],[15.8,22.9,-13.2],[17.6,23.8,-14.8],[19.6,24.5,-16.5],[21.7,25.1,-18.2],[23.7,25.9,-19.9],[25.6,26.8,-21.5],[27.1,28.2,-22.8],[28.1,30.2,-23.6],[28.6,32.9,-24],[28.7,36.6,-24.1],[13.7,19.5,-11.5],[14,21,-12],[14.7,22.1,-13.3],[15.6,22.8,-14.8],[16.6,23.3,-16.6],[17.7,23.8,-18.4],[18.7,24.3,-20.1],[19.6,25.1,-21.7],[20.3,26.1,-23],[20.8,27.6,-23.9],[21.1,29.7,-24.3],[21.1,32.5,-24.3],[13.7,19.5,-11.5],[13.8,21,-12.1],[14,22,-13.5],[14.3,22.7,-15.2],[14.7,23.3,-17.2],[15,23.7,-19.2],[15.4,24.2,-21.1],[15.7,25,-22.9],[16,26,-24.4],[16.1,27.5,-25.3],[16.2,29.5,-25.8],[16.2,32.3,-25.9],[13.7,19.5,-11.5],[13.6,21.3,-12.2],[13.3,22.6,-13.9],[12.9,23.4,-16],[12.5,24,-18.3],[12.1,24.6,-20.7],[11.6,25.2,-23.1],[11.3,26.1,-25.2],[11,27.3,-27],[10.7,29.1,-28.2],[10.7,31.6,-28.7],[10.6,34.9,-28.8],[13.7,19.5,-11.5],[13.3,21.5,-12.2],[12.4,22.8,-13.8],[11.2,23.7,-15.7],[10,24.3,-17.9],[8.7,24.9,-20.2],[7.4,25.6,-22.4],[6.2,26.5,-24.4],[5.3,27.9,-26.1],[4.6,29.8,-27.2],[4.3,32.4,-27.7],[4.3,35.9,-27.8],[13.7,19.5,-11.5],[13.1,21.5,-12],[11.7,22.8,-13.2],[9.9,23.7,-14.6],[8,24.3,-16.3],[6,24.9,-17.9],[4,25.6,-19.6],[2.2,26.5,-21.1],[.8,27.9,-22.3],[-.2,29.8,-23.1],[-.6,32.4,-23.5],[-.7,36,-23.6],[11.8,16.1,-13.1],[11.1,17.8,-13.3],[9.6,19,-13.8],[7.7,19.7,-14.5],[5.6,20.3,-15.3],[3.5,20.8,-16.1],[1.3,21.4,-16.9],[-.6,22.3,-17.6],[-2.2,23.4,-18.1],[-3.2,25.1,-18.5],[-3.7,27.4,-18.7],[-3.8,30.6,-18.7],[11.8,16.1,-13.1],[11,17.8,-13.1],[9.5,18.9,-13.1],[7.5,19.7,-13.1],[5.3,20.3,-13.1],[3,20.8,-13.1],[.7,21.4,-13.1],[-1.3,22.2,-13.1],[-3,23.4,-13.1],[-4.1,25.1,-13.1],[-4.6,27.4,-13.1],[-4.7,30.5,-13.1],[13.8,14.1,-8.6],[13,16.1,-8.3],[11.2,17.5,-7.7],[9,18.4,-6.9],[6.6,19,-6],[4.1,19.7,-5.1],[1.6,20.4,-4.2],[-.6,21.3,-3.4],[-2.5,22.7,-2.7],[-3.7,24.6,-2.2],[-4.3,27.3,-2],[-4.4,31,-2],[13.7,19.5,-11.5],[13.1,21.4,-11],[11.7,22.8,-9.8],[9.9,23.7,-8.3],[8,24.3,-6.7],[6,24.9,-5.1],[4.1,25.6,-3.4],[2.3,26.5,-1.9],[.9,27.8,-.7],[-.1,29.7,.1],[-.6,32.3,.5],[-.6,35.9,.5],[13.8,14.1,-8.6],[13.4,15.7,-8],[12.7,16.7,-6.8],[11.8,17.4,-5.2],[10.8,17.9,-3.5],[9.8,18.4,-1.7],[8.7,19,.1],[7.8,19.7,1.7],[7.1,20.8,3],[6.6,22.3,3.9],[6.3,24.4,4.3],[6.3,27.2,4.4],[13.7,19.5,-11.5],[13.5,21.5,-10.7],[13.2,22.9,-8.8],[12.8,23.8,-6.5],[12.4,24.5,-4],[11.9,25.1,-1.3],[11.4,25.8,1.3],[11,26.7,3.6],[10.7,28.1,5.5],[10.5,30,6.8],[10.4,32.7,7.4],[10.3,36.4,7.5],[13.7,19.5,-11.5],[13.8,21.3,-10.8],[14.1,22.5,-9.2],[14.5,23.3,-7.1],[14.9,23.9,-4.9],[15.3,24.4,-2.6],[15.7,25,-.3],[16,25.9,1.8],[16.3,27.1,3.5],[16.5,28.8,4.6],[16.6,31.1,5.1],[16.6,34.4,5.2],[13.7,19.5,-11.5],[14,21.2,-10.9],[14.8,22.4,-9.5],[15.8,23.2,-7.8],[16.9,23.7,-5.8],[18.1,24.2,-3.9],[19.2,24.8,-1.9],[20.2,25.7,-.2],[21.1,26.8,1.3],[21.6,28.5,2.2],[21.9,30.8,2.7],[21.9,33.9,2.8],[13.7,19.5,-11.5],[14.2,21,-11.1],[15.2,22,-10.2],[16.5,22.7,-9.1],[18,23.1,-7.9],[19.5,23.6,-6.6],[21,24.1,-5.4],[22.3,24.8,-4.2],[23.4,25.8,-3.3],[24.2,27.3,-2.7],[24.5,29.2,-2.4],[24.6,31.9,-2.4],[13.7,19.5,-11.5],[14.4,21.2,-11.2],[15.8,22.4,-10.7],[17.7,23.2,-10],[19.8,23.7,-9.3],[21.9,24.2,-8.5],[24.1,24.8,-7.7],[26,25.7,-7],[27.5,26.8,-6.4],[28.6,28.5,-6.1],[29.1,30.8,-5.9],[29.2,33.9,-5.9],[-13.8,23,-10],[-13.2,24.4,-10],[-11.9,25.4,-10],[-10.2,26.1,-10],[-8.4,26.6,-10],[-6.6,27,-10],[-4.7,27.5,-10],[-3.1,28.2,-10],[-1.7,29.2,-10],[-.8,30.7,-10],[-.4,32.6,-10],[-.3,35.3,-10],[-13.7,22.9,-10],[-13.1,24.7,-10.2],[-11.6,25.8,-10.7],[-9.8,26.6,-11.4],[-7.8,27.2,-12.1],[-5.7,27.7,-12.9],[-3.7,28.3,-13.6],[-1.8,29.2,-14.3],[-.3,30.4,-14.9],[.7,32,-15.2],[1.2,34.4,-15.4],[1.3,37.5,-15.4],[-13.7,22.9,-10],[-13.2,24.6,-10.4],[-12.1,25.8,-11.4],[-10.6,26.5,-12.6],[-9,27.1,-13.9],[-7.4,27.6,-15.3],[-5.7,28.2,-16.7],[-4.3,29,-17.9],[-3.1,30.2,-18.9],[-2.3,31.8,-19.6],[-1.9,34.1,-19.9],[-1.8,37.1,-20],[-13.8,23,-10],[-13.5,24.4,-10.5],[-12.8,25.4,-11.6],[-12,26.1,-13],[-11.1,26.6,-14.6],[-10.2,27,-16.2],[-9.2,27.5,-17.8],[-8.4,28.2,-19.2],[-7.7,29.2,-20.4],[-7.3,30.7,-21.2],[-7.1,32.6,-21.6],[-7,35.3,-21.6],[-13.8,23,-10],[-13.6,24.4,-10.6],[-13.4,25.4,-11.8],[-13.1,26.1,-13.4],[-12.8,26.6,-15.2],[-12.5,27,-17.1],[-12.2,27.5,-18.9],[-11.9,28.2,-20.5],[-11.7,29.2,-21.8],[-11.5,30.7,-22.7],[-11.4,32.6,-23.2],[-11.4,35.3,-23.2],[-13.8,23,-10],[-13.9,24.4,-10.6],[-14.1,25.4,-11.8],[-14.4,26.1,-13.4],[-14.7,26.6,-15.2],[-15,27,-17.1],[-15.3,27.5,-18.9],[-15.6,28.2,-20.5],[-15.8,29.2,-21.8],[-16,30.7,-22.7],[-16.1,32.6,-23.2],[-16.1,35.3,-23.2],[-9.6,15.5,-14.2],[-9.9,16.9,-14.7],[-10.5,17.9,-15.8],[-11.3,18.6,-17.2],[-12.2,19.1,-18.8],[-13.2,19.5,-20.4],[-14.1,20,-22],[-14.9,20.7,-23.4],[-15.6,21.7,-24.6],[-16,23.1,-25.4],[-16.2,25.1,-25.8],[-16.3,27.8,-25.8],[-13.7,23,-10],[-14.2,24.6,-10.4],[-15.3,25.7,-11.3],[-16.7,26.4,-12.5],[-18.3,27,-13.8],[-19.9,27.5,-15.1],[-21.5,28,-16.5],[-22.9,28.8,-17.7],[-24,29.9,-18.6],[-24.8,31.5,-19.3],[-25.2,33.7,-19.6],[-25.2,36.7,-19.6],[-13.8,23,-10],[-14.3,24.3,-10.2],[-15.3,25.2,-10.6],[-16.7,25.8,-11.1],[-18.2,26.2,-11.6],[-19.8,26.6,-12.2],[-21.3,27.1,-12.7],[-22.7,27.7,-13.3],[-23.8,28.6,-13.7],[-24.6,29.8,-13.9],[-24.9,31.6,-14.1],[-25,34,-14.1],[-14.3,14.7,-7.6],[-15,16.3,-7.6],[-16.4,17.4,-7.6],[-18.3,18.2,-7.6],[-20.3,18.8,-7.6],[-22.4,19.3,-7.6],[-24.5,19.8,-7.6],[-26.4,20.6,-7.6],[-27.9,21.7,-7.6],[-29,23.3,-7.6],[-29.4,25.6,-7.6],[-29.5,28.6,-7.6],[-13.8,23,-10],[-14.3,24.3,-9.8],[-15.3,25.2,-9.4],[-16.7,25.8,-8.9],[-18.2,26.2,-8.4],[-19.8,26.6,-7.8],[-21.3,27.1,-7.3],[-22.7,27.7,-6.8],[-23.8,28.6,-6.3],[-24.6,29.8,-6.1],[-24.9,31.6,-5.9],[-25,33.9,-5.9],[-13.7,23,-10],[-14.2,24.5,-9.6],[-15.3,25.6,-8.7],[-16.6,26.3,-7.6],[-18.1,26.8,-6.4],[-19.6,27.3,-5.1],[-21.1,27.8,-3.8],[-22.4,28.5,-2.7],[-23.5,29.6,-1.8],[-24.3,31.1,-1.2],[-24.6,33.2,-.9],[-24.7,36,-.8],[-14.3,14.7,-7.6],[-14.6,16.1,-7.1],[-15.3,17.1,-6],[-16.1,17.8,-4.6],[-17,18.3,-3],[-17.9,18.7,-1.4],[-18.8,19.2,.2],[-19.7,19.9,1.6],[-20.4,20.9,2.8],[-20.8,22.4,3.6],[-21,24.3,4],[-21.1,27,4],[-13.7,23,-10],[-13.8,24.6,-9.3],[-14.1,25.7,-7.9],[-14.4,26.4,-6.2],[-14.8,26.9,-4.2],[-15.1,27.4,-2.2],[-15.5,28,-.2],[-15.8,28.8,1.6],[-16,29.9,3.1],[-16.2,31.4,4.1],[-16.3,33.6,4.6],[-16.3,36.5,4.7],[-9.6,15.5,-14.2],[-9.4,17.1,-13.5],[-9.2,18.2,-12.1],[-8.9,18.9,-10.3],[-8.5,19.5,-8.3],[-8.2,20,-6.3],[-7.8,20.5,-4.3],[-7.5,21.3,-2.5],[-7.2,22.4,-1],[-7.1,24,0],[-7,26.2,.5],[-7,29.2,.6],[-13.8,23,-10],[-13.5,24.3,-9.6],[-13,25.1,-8.6],[-12.3,25.7,-7.5],[-11.5,26.1,-6.1],[-10.8,26.4,-4.8],[-10,26.9,-3.5],[-9.3,27.5,-2.2],[-8.7,28.3,-1.3],[-8.3,29.5,-.6],[-8.2,31.1,-.3],[-8.1,33.4,-.2],[-13.7,23,-10],[-13.3,24.5,-9.6],[-12.2,25.5,-8.7],[-10.9,26.2,-7.6],[-9.5,26.8,-6.4],[-8,27.2,-5.1],[-6.5,27.8,-3.9],[-5.1,28.5,-2.8],[-4,29.5,-1.8],[-3.3,31,-1.2],[-3,33.1,-.9],[-2.9,35.9,-.9],[-9.6,15.5,-14.2],[-9,17,-14],[-7.7,18.1,-13.5],[-6,18.8,-12.9],[-4.2,19.3,-12.2],[-2.3,19.8,-11.5],[-.5,20.4,-10.9],[1.2,21.1,-10.3],[2.6,22.2,-9.8],[3.5,23.7,-9.4],[3.9,25.8,-9.3],[4,28.7,-9.2],[0,0,0],[.4,2.7,0],[1.4,4.7,0],[2.7,6.3,0],[4.2,7.5,0],[5.9,8.5,0],[7.6,9.3,0],[9.4,10.1,0],[11.2,10.8,0],[13,11.7,0],[14.7,12.7,0],[16.2,14.1,0],[17.6,15.7,0],[18.6,17.8,0],[19.4,20.4,0],[19.9,23.6,0],[20.1,27.5,0],[20.1,32.2,0],[0,0,0],[.4,2.8,0],[1.4,5,-.1],[2.7,6.7,-.2],[4.2,8,-.3],[5.9,9,-.4],[7.6,9.9,-.5],[9.4,10.7,-.7],[11.2,11.5,-.8],[13,12.4,-.9],[14.7,13.5,-1],[16.2,14.9,-1.1],[17.5,16.6,-1.2],[18.6,18.8,-1.3],[19.4,21.6,-1.4],[19.8,25,-1.4],[20,29.1,-1.4],[20,34.1,-1.4],[0,0,0],[.4,2.7,0],[1.2,4.8,-.2],[2.3,6.4,-.3],[3.6,7.7,-.5],[5,8.7,-.7],[6.5,9.5,-.9],[8,10.3,-1.1],[9.6,11,-1.3],[11.1,11.9,-1.6],[12.5,13,-1.8],[13.8,14.3,-1.9],[15,16,-2.1],[15.9,18.1,-2.2],[16.5,20.7,-2.3],[16.9,24,-2.4],[17.1,28,-2.4],[17.1,32.8,-2.4],[0,0,0],[.4,2.8,-.1],[1.3,4.9,-.4],[2.6,6.6,-.7],[4,7.9,-1.2],[5.6,8.9,-1.6],[7.3,9.8,-2.1],[9,10.6,-2.6],[10.8,11.4,-3.1],[12.5,12.3,-3.6],[14.1,13.4,-4],[15.6,14.7,-4.5],[16.9,16.5,-4.8],[17.9,18.6,-5.1],[18.7,21.4,-5.3],[19.1,24.7,-5.5],[19.3,28.8,-5.5],[19.3,33.8,-5.5],[0,0,0],[.4,2.7,-.1],[1.3,4.8,-.5],[2.5,6.4,-.9],[3.9,7.7,-1.4],[5.5,8.7,-2],[7.2,9.5,-2.6],[8.8,10.3,-3.2],[10.5,11,-3.8],[12.2,11.9,-4.4],[13.8,13,-5],[15.3,14.3,-5.6],[16.5,16,-6],[17.5,18.1,-6.4],[18.2,20.8,-6.6],[18.7,24,-6.8],[18.8,28,-6.9],[18.9,32.8,-6.9],[0,0,0],[.4,2.6,-.2],[1.4,4.6,-.6],[2.7,6.2,-1.2],[4.3,7.4,-1.9],[6,8.4,-2.7],[7.8,9.2,-3.5],[9.6,9.9,-4.3],[11.5,10.7,-5.1],[13.3,11.5,-5.9],[15.1,12.6,-6.7],[16.6,13.9,-7.4],[18,15.5,-8],[19.1,17.5,-8.5],[19.9,20.1,-8.9],[20.4,23.2,-9.1],[20.6,27.1,-9.2],[20.6,31.8,-9.2],[0,0,0],[.4,2.8,-.2],[1.2,5,-.6],[2.4,6.8,-1.3],[3.7,8.1,-2],[5.2,9.1,-2.8],[6.7,10,-3.6],[8.3,10.8,-4.4],[9.9,11.6,-5.3],[11.5,12.5,-6.1],[13,13.6,-6.9],[14.3,15.1,-7.6],[15.5,16.8,-8.2],[16.5,19,-8.8],[17.1,21.8,-9.1],[17.5,25.3,-9.3],[17.7,29.4,-9.4],[17.7,34.5,-9.4],[0,0,0],[.4,2.7,-.2],[1.2,4.7,-.7],[2.3,6.3,-1.4],[3.6,7.6,-2.2],[5,8.5,-3.1],[6.5,9.4,-4],[8,10.1,-5],[9.5,10.9,-5.9],[11,11.7,-6.9],[12.5,12.8,-7.8],[13.8,14.1,-8.6],[14.9,15.8,-9.3],[15.8,17.8,-9.9],[16.5,20.4,-10.3],[16.8,23.7,-10.5],[17,27.6,-10.6],[17,32.3,-10.6],[0,0,0],[.3,2.5,-.2],[1,4.5,-.8],[1.9,6,-1.6],[3,7.2,-2.5],[4.1,8.2,-3.5],[5.4,8.9,-4.5],[6.6,9.7,-5.6],[7.9,10.4,-6.6],[9.2,11.2,-7.7],[10.4,12.2,-8.7],[11.5,13.5,-9.6],[12.4,15,-10.4],[13.1,17,-11],[13.7,19.5,-11.5],[0,0,0],[.3,2.8,-.3],[1,5,-.9],[1.9,6.7,-1.9],[3,8,-2.9],[4.2,9,-4.1],[5.5,9.9,-5.3],[6.8,10.7,-6.5],[8.1,11.5,-7.8],[9.3,12.4,-9],[10.6,13.5,-10.2],[11.7,14.9,-11.3],[12.6,16.7,-12.2],[13.4,18.9,-12.9],[14,21.6,-13.5],[14.3,25,-13.8],[14.4,29.2,-13.9],[14.5,34.2,-14],[0,0,0],[.3,2.7,-.3],[.9,4.8,-1],[1.8,6.5,-2],[2.8,7.7,-3.1],[3.9,8.7,-4.4],[5.1,9.6,-5.7],[6.3,10.3,-7],[7.5,11.1,-8.3],[8.7,12,-9.7],[9.8,13.1,-10.9],[10.9,14.4,-12.1],[11.8,16.1,-13.1],[12.5,18.2,-13.9],[13,20.9,-14.4],[13.3,24.1,-14.8],[13.4,28.1,-14.9],[13.4,33,-14.9],[0,0,0],[.2,2.6,-.3],[.8,4.6,-1],[1.6,6.2,-2],[2.5,7.4,-3.2],[3.5,8.4,-4.5],[4.5,9.2,-5.8],[5.6,9.9,-7.2],[6.7,10.7,-8.6],[7.7,11.5,-9.9],[8.7,12.5,-11.2],[9.7,13.8,-12.4],[10.5,15.5,-13.4],[11.1,17.5,-14.2],[11.6,20.1,-14.8],[11.8,23.2,-15.1],[11.9,27.1,-15.3],[12,31.7,-15.3],[0,0,0],[.2,2.7,-.4],[.7,4.8,-1.2],[1.3,6.4,-2.3],[2.1,7.7,-3.6],[2.9,8.7,-5.1],[3.8,9.5,-6.6],[4.7,10.2,-8.2],[5.6,11,-9.7],[6.5,11.9,-11.3],[7.3,13,-12.7],[8.1,14.3,-14.1],[8.8,16,-15.2],[9.3,18.1,-16.1],[9.7,20.7,-16.8],[9.9,24,-17.2],[10,28,-17.4],[10,32.8,-17.4],[0,0,0],[.2,2.8,-.4],[.7,5,-1.4],[1.3,6.7,-2.7],[2.1,8,-4.2],[2.9,9.1,-5.9],[3.7,9.9,-7.6],[4.6,10.7,-9.4],[5.5,11.5,-11.2],[6.4,12.4,-13],[7.2,13.6,-14.7],[7.9,14.9,-16.3],[8.6,16.7,-17.6],[9.1,18.9,-18.7],[9.5,21.7,-19.5],[9.7,25.1,-19.9],[9.8,29.2,-20.1],[9.8,34.3,-20.1],[0,0,0],[.2,2.8,-.4],[.5,5,-1.3],[1,6.6,-2.5],[1.6,7.9,-3.9],[2.2,9,-5.5],[2.9,9.8,-7.1],[3.5,10.6,-8.8],[4.2,11.4,-10.5],[4.9,12.3,-12.1],[5.5,13.4,-13.7],[6.1,14.8,-15.1],[6.6,16.6,-16.4],[7,18.7,-17.4],[7.3,21.5,-18.1],[7.5,24.9,-18.5],[7.6,29,-18.7],[7.6,34,-18.7],[0,0,0],[.1,2.9,-.4],[.4,5.1,-1.3],[.8,6.8,-2.5],[1.3,8.2,-4],[1.8,9.2,-5.6],[2.4,10.1,-7.2],[2.9,10.9,-9],[3.5,11.7,-10.7],[4,12.7,-12.4],[4.5,13.8,-14],[5,15.2,-15.4],[5.4,17,-16.7],[5.8,19.2,-17.7],[6,22,-18.5],[6.1,25.5,-18.9],[6.2,29.7,-19.1],[6.2,34.9,-19.1],[0,0,0],[.1,2.8,-.4],[.2,4.9,-1.4],[.5,6.5,-2.7],[.8,7.8,-4.3],[1,8.8,-6],[1.4,9.7,-7.7],[1.7,10.5,-9.6],[2,11.3,-11.4],[2.3,12.2,-13.2],[2.6,13.2,-14.9],[2.9,14.6,-16.5],[3.1,16.3,-17.8],[3.3,18.5,-18.9],[3.5,21.2,-19.7],[3.6,24.5,-20.2],[3.6,28.5,-20.4],[3.6,33.5,-20.4],[0,0,0],[.1,3,-.6],[.2,5.3,-1.9],[.4,7.1,-3.7],[.6,8.5,-5.8],[.9,9.6,-8.1],[1.1,10.5,-10.6],[1.4,11.3,-13],[1.6,12.2,-15.5],[1.9,13.1,-18],[2.1,14.3,-20.4],[2.4,15.8,-22.5],[2.6,17.6,-24.4],[2.7,20,-25.8],[2.8,22.9,-26.9],[2.9,26.5,-27.5],[2.9,30.8,-27.8],[2.9,36.2,-27.8],[0,0,0],[0,2.6,-.4],[0,4.6,-1.4],[.1,6.1,-2.7],[.1,7.3,-4.2],[.2,8.3,-5.9],[.3,9.1,-7.6],[.3,9.8,-9.4],[.4,10.5,-11.2],[.5,11.4,-13],[.5,12.4,-14.7],[.6,13.7,-16.2],[.6,15.3,-17.6],[.7,17.3,-18.6],[.7,19.8,-19.4],[.7,22.9,-19.9],[.7,26.7,-20],[.7,31.3,-20.1],[0,0,0],[0,2.6,-.4],[-.1,4.6,-1.4],[-.3,6.2,-2.7],[-.4,7.4,-4.2],[-.6,8.4,-5.8],[-.8,9.2,-7.6],[-1,9.9,-9.4],[-1.2,10.7,-11.2],[-1.4,11.5,-12.9],[-1.5,12.6,-14.6],[-1.7,13.9,-16.1],[-1.8,15.5,-17.5],[-1.9,17.5,-18.5],[-2,20.1,-19.3],[-2.1,23.3,-19.8],[-2.1,27.1,-19.9],[-2.1,31.8,-20],[0,0,0],[-.1,2.9,-.4],[-.2,5.1,-1.4],[-.5,6.9,-2.7],[-.7,8.2,-4.2],[-1,9.3,-5.9],[-1.3,10.2,-7.6],[-1.7,11,-9.4],[-2,11.8,-11.3],[-2.3,12.8,-13],[-2.6,13.9,-14.7],[-2.9,15.3,-16.3],[-3.1,17.1,-17.6],[-3.3,19.4,-18.7],[-3.4,22.2,-19.5],[-3.5,25.7,-19.9],[-3.5,30,-20.1],[-3.6,35.1,-20.2],[0,0,0],[-.1,2.6,-.4],[-.3,4.7,-1.3],[-.6,6.3,-2.6],[-1,7.5,-4.1],[-1.4,8.5,-5.7],[-1.8,9.3,-7.4],[-2.3,10,-9.1],[-2.7,10.8,-10.9],[-3.1,11.7,-12.6],[-3.6,12.7,-14.3],[-3.9,14,-15.8],[-4.3,15.6,-17.1],[-4.5,17.7,-18.1],[-4.7,20.3,-18.8],[-4.8,23.5,-19.3],[-4.9,27.4,-19.5],[-4.9,32.1,-19.5],[0,0,0],[-.1,2.7,-.4],[-.4,4.9,-1.3],[-.8,6.5,-2.5],[-1.3,7.8,-4],[-1.8,8.8,-5.6],[-2.4,9.7,-7.2],[-2.9,10.4,-9],[-3.5,11.2,-10.7],[-4,12.1,-12.4],[-4.5,13.2,-14],[-5,14.5,-15.4],[-5.4,16.3,-16.7],[-5.8,18.4,-17.7],[-6,21.1,-18.5],[-6.1,24.4,-18.9],[-6.2,28.4,-19.1],[-6.2,33.3,-19.1],[0,0,0],[-.2,2.6,-.4],[-.6,4.7,-1.2],[-1.1,6.3,-2.3],[-1.7,7.5,-3.6],[-2.4,8.5,-5],[-3.2,9.3,-6.5],[-3.9,10,-8],[-4.7,10.8,-9.6],[-5.4,11.6,-11.1],[-6.1,12.7,-12.5],[-6.8,14,-13.9],[-7.3,15.6,-15],[-7.8,17.7,-15.9],[-8.1,20.3,-16.6],[-8.3,23.4,-16.9],[-8.3,27.3,-17.1],[-8.4,32,-17.1],[0,0,0],[-.2,2.7,-.4],[-.7,4.8,-1.2],[-1.3,6.4,-2.3],[-2.1,7.7,-3.6],[-2.9,8.7,-5],[-3.7,9.5,-6.5],[-4.6,10.2,-8],[-5.5,11,-9.5],[-6.4,11.9,-11.1],[-7.2,13,-12.5],[-8,14.3,-13.8],[-8.6,16,-15],[-9.2,18.1,-15.9],[-9.5,20.7,-16.5],[-9.8,24,-16.9],[-9.9,27.9,-17.1],[-9.9,32.7,-17.1],[0,0,0],[-.2,2.6,-.3],[-.7,4.6,-1.1],[-1.5,6.2,-2.2],[-2.3,7.4,-3.4],[-3.2,8.4,-4.7],[-4.1,9.2,-6.1],[-5.1,9.9,-7.6],[-6.1,10.7,-9.1],[-7.1,11.5,-10.5],[-8,12.6,-11.8],[-8.8,13.8,-13.1],[-9.6,15.5,-14.2],[-10.1,17.5,-15],[-10.6,20.1,-15.7],[-10.8,23.2,-16],[-10.9,27.1,-16.2],[-10.9,31.7,-16.2],[0,0,0],[-.3,2.6,-.3],[-.8,4.7,-1.1],[-1.6,6.2,-2.1],[-2.6,7.5,-3.3],[-3.6,8.4,-4.6],[-4.7,9.2,-6],[-5.8,10,-7.4],[-6.9,10.7,-8.8],[-8,11.6,-10.2],[-9,12.6,-11.6],[-10,13.9,-12.8],[-10.8,15.6,-13.8],[-11.5,17.6,-14.7],[-11.9,20.2,-15.3],[-12.2,23.3,-15.7],[-12.3,27.2,-15.8],[-12.4,31.9,-15.8],[0,0,0],[-.3,2.9,-.3],[-.9,5.1,-1],[-1.8,6.8,-2],[-2.8,8.1,-3.1],[-3.9,9.2,-4.4],[-5.1,10,-5.7],[-6.3,10.8,-7],[-7.5,11.7,-8.3],[-8.7,12.6,-9.7],[-9.8,13.7,-10.9],[-10.9,15.1,-12.1],[-11.8,16.9,-13.1],[-12.5,19.1,-13.9],[-13,21.9,-14.4],[-13.3,25.4,-14.8],[-13.4,29.6,-14.9],[-13.4,34.7,-14.9],[0,0,0],[-.3,2.8,-.3],[-1,4.9,-.9],[-1.9,6.6,-1.9],[-3,7.9,-2.9],[-4.2,8.9,-4.1],[-5.5,9.8,-5.3],[-6.8,10.6,-6.5],[-8.1,11.4,-7.8],[-9.3,12.3,-9],[-10.6,13.4,-10.2],[-11.7,14.7,-11.3],[-12.6,16.5,-12.2],[-13.4,18.7,-12.9],[-14,21.4,-13.5],[-14.3,24.7,-13.8],[-14.4,28.9,-13.9],[-14.5,33.8,-14],[0,0,0],[-.3,2.6,-.2],[-.9,4.6,-.7],[-1.8,6.1,-1.3],[-2.9,7.4,-2.1],[-4.1,8.3,-3],[-5.3,9.1,-3.8],[-6.5,9.8,-4.7],[-7.8,10.6,-5.6],[-9,11.4,-6.5],[-10.2,12.4,-7.4],[-11.2,13.7,-8.2],[-12.2,15.3,-8.8],[-12.9,17.3,-9.4],[-13.4,19.9,-9.8],[-13.8,23,-10],[0,0,0],[-.4,2.8,-.2],[-1.2,5,-.7],[-2.3,6.7,-1.4],[-3.6,8,-2.2],[-5,9.1,-3.1],[-6.5,9.9,-4],[-8,10.7,-5],[-9.5,11.5,-5.9],[-11,12.4,-6.9],[-12.5,13.5,-7.8],[-13.8,14.9,-8.6],[-14.9,16.7,-9.3],[-15.8,18.9,-9.9],[-16.5,21.7,-10.3],[-16.8,25.1,-10.5],[-17,29.2,-10.6],[-17,34.3,-10.6],[0,0,0],[-.4,2.8,-.2],[-1.2,4.9,-.6],[-2.4,6.6,-1.3],[-3.7,7.9,-2],[-5.2,8.9,-2.8],[-6.7,9.8,-3.6],[-8.3,10.5,-4.4],[-9.9,11.3,-5.3],[-11.5,12.2,-6.1],[-13,13.3,-6.9],[-14.3,14.7,-7.6],[-15.5,16.4,-8.3],[-16.5,18.6,-8.8],[-17.1,21.3,-9.1],[-17.5,24.6,-9.3],[-17.7,28.7,-9.4],[-17.7,33.7,-9.4],[0,0,0],[-.5,3,-.2],[-1.5,5.3,-.7],[-2.9,7,-1.3],[-4.5,8.4,-2],[-6.4,9.5,-2.8],[-8.3,10.4,-3.7],[-10.2,11.3,-4.5],[-12.2,12.1,-5.4],[-14.1,13.1,-6.3],[-15.9,14.2,-7.1],[-17.6,15.7,-7.8],[-19,17.6,-8.5],[-20.2,19.9,-9],[-21,22.8,-9.4],[-21.5,26.4,-9.6],[-21.7,30.7,-9.7],[-21.8,36,-9.7],[0,0,0],[-.4,2.7,-.1],[-1.3,4.8,-.5],[-2.5,6.4,-.9],[-3.9,7.7,-1.4],[-5.5,8.7,-2],[-7.2,9.5,-2.6],[-8.8,10.3,-3.2],[-10.5,11.1,-3.8],[-12.2,11.9,-4.4],[-13.8,13,-5],[-15.3,14.3,-5.6],[-16.5,16,-6],[-17.5,18.2,-6.4],[-18.2,20.8,-6.6],[-18.7,24.1,-6.8],[-18.8,28.1,-6.9],[-18.9,32.9,-6.9],[0,0,0],[-.4,2.7,-.1],[-1.2,4.8,-.3],[-2.3,6.4,-.6],[-3.6,7.6,-1],[-5,8.6,-1.4],[-6.5,9.4,-1.9],[-8,10.2,-2.3],[-9.5,10.9,-2.7],[-11,11.8,-3.2],[-12.5,12.9,-3.6],[-13.8,14.2,-3.9],[-14.9,15.9,-4.3],[-15.8,17.9,-4.5],[-16.5,20.6,-4.7],[0,0,0],[-.4,2.6,-.1],[-1.3,4.6,-.3],[-2.6,6.2,-.5],[-4,7.4,-.9],[-5.6,8.3,-1.2],[-7.3,9.1,-1.6],[-9,9.8,-1.9],[-10.7,10.6,-2.3],[-12.4,11.4,-2.6],[-14.1,12.5,-3],[-15.6,13.7,-3.3],[-16.8,15.3,-3.6],[-17.9,17.4,-3.8],[-18.6,19.9,-4],[-19,23,-4],[-19.2,26.9,-4.1],[-19.2,31.5,-4.1],[0,0,0],[-.4,2.7,-.1],[-1.4,4.8,-.2],[-2.6,6.4,-.4],[-4.2,7.7,-.6],[-5.8,8.7,-.8],[-7.5,9.5,-1.1],[-9.3,10.3,-1.3],[-11.1,11.1,-1.6],[-12.9,12,-1.8],[-14.5,13,-2],[-16.1,14.4,-2.3],[-17.4,16.1,-2.4],[-18.5,18.2,-2.6],[-19.2,20.8,-2.7],[-19.7,24.1,-2.8],[-19.9,28.1,-2.8],[-19.9,33,-2.8],[0,0,0],[-.4,2.9,0],[-1.4,5.1,-.1],[-2.7,6.8,-.2],[-4.3,8.2,-.3],[-6,9.2,-.4],[-7.8,10.1,-.5],[-9.7,10.9,-.7],[-11.5,11.7,-.8],[-13.3,12.7,-.9],[-15.1,13.8,-1.1],[-16.6,15.2,-1.2],[-18,17,-1.3],[-19.1,19.3,-1.3],[-19.9,22.1,-1.4],[-20.4,25.5,-1.4],[-20.6,29.8,-1.4],[-20.6,34.9,-1.4]],vertexNormals:[],vertexUVs:[],facePositions:[],faceNormals:[],faceUVs:[],linePositions:[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[97,98],[98,99],[99,100],[100,101],[101,102],[102,103],[103,104],[104,105],[105,106],[106,107],[107,108],[109,110],[110,111],[111,112],[112,113],[113,114],[114,115],[115,116],[116,117],[117,118],[118,119],[119,120],[121,122],[122,123],[123,124],[124,125],[125,126],[126,127],[127,128],[128,129],[129,130],[130,131],[131,132],[133,134],[134,135],[135,136],[136,137],[137,138],[138,139],[139,140],[140,141],[141,142],[142,143],[143,144],[145,146],[146,147],[147,148],[148,149],[149,150],[150,151],[151,152],[152,153],[153,154],[154,155],[155,156],[157,158],[158,159],[159,160],[160,161],[161,162],[162,163],[163,164],[164,165],[165,166],[166,167],[167,168],[169,170],[170,171],[171,172],[172,173],[173,174],[174,175],[175,176],[176,177],[177,178],[178,179],[179,180],[181,182],[182,183],[183,184],[184,185],[185,186],[186,187],[187,188],[188,189],[189,190],[190,191],[191,192],[193,194],[194,195],[195,196],[196,197],[197,198],[198,199],[199,200],[200,201],[201,202],[202,203],[203,204],[205,206],[206,207],[207,208],[208,209],[209,210],[210,211],[211,212],[212,213],[213,214],[214,215],[215,216],[217,218],[218,219],[219,220],[220,221],[221,222],[222,223],[223,224],[224,225],[225,226],[226,227],[227,228],[229,230],[230,231],[231,232],[232,233],[233,234],[234,235],[235,236],[236,237],[237,238],[238,239],[239,240],[241,242],[242,243],[243,244],[244,245],[245,246],[246,247],[247,248],[248,249],[249,250],[250,251],[251,252],[253,254],[254,255],[255,256],[256,257],[257,258],[258,259],[259,260],[260,261],[261,262],[262,263],[263,264],[265,266],[266,267],[267,268],[268,269],[269,270],[270,271],[271,272],[272,273],[273,274],[274,275],[275,276],[277,278],[278,279],[279,280],[280,281],[281,282],[282,283],[283,284],[284,285],[285,286],[286,287],[287,288],[289,290],[290,291],[291,292],[292,293],[293,294],[294,295],[295,296],[296,297],[297,298],[298,299],[299,300],[301,302],[302,303],[303,304],[304,305],[305,306],[306,307],[307,308],[308,309],[309,310],[310,311],[311,312],[313,314],[314,315],[315,316],[316,317],[317,318],[318,319],[319,320],[320,321],[321,322],[322,323],[323,324],[325,326],[326,327],[327,328],[328,329],[329,330],[330,331],[331,332],[332,333],[333,334],[334,335],[335,336],[337,338],[338,339],[339,340],[340,341],[341,342],[342,343],[343,344],[344,345],[345,346],[346,347],[347,348],[349,350],[350,351],[351,352],[352,353],[353,354],[354,355],[355,356],[356,357],[357,358],[358,359],[359,360],[361,362],[362,363],[363,364],[364,365],[365,366],[366,367],[367,368],[368,369],[369,370],[370,371],[371,372],[373,374],[374,375],[375,376],[376,377],[377,378],[378,379],[379,380],[380,381],[381,382],[382,383],[383,384],[385,386],[386,387],[387,388],[388,389],[389,390],[390,391],[391,392],[392,393],[393,394],[394,395],[395,396],[397,398],[398,399],[399,400],[400,401],[401,402],[402,403],[403,404],[404,405],[405,406],[406,407],[407,408],[409,410],[410,411],[411,412],[412,413],[413,414],[414,415],[415,416],[416,417],[417,418],[418,419],[419,420],[421,422],[422,423],[423,424],[424,425],[425,426],[426,427],[427,428],[428,429],[429,430],[430,431],[431,432],[433,434],[434,435],[435,436],[436,437],[437,438],[438,439],[439,440],[440,441],[441,442],[442,443],[443,444],[445,446],[446,447],[447,448],[448,449],[449,450],[450,451],[451,452],[452,453],[453,454],[454,455],[455,456],[457,458],[458,459],[459,460],[460,461],[461,462],[462,463],[463,464],[464,465],[465,466],[466,467],[467,468],[469,470],[470,471],[471,472],[472,473],[473,474],[474,475],[475,476],[476,477],[477,478],[478,479],[479,480],[481,482],[482,483],[483,484],[484,485],[485,486],[486,487],[487,488],[488,489],[489,490],[490,491],[491,492],[493,494],[494,495],[495,496],[496,497],[497,498],[498,499],[499,500],[500,501],[501,502],[502,503],[503,504],[505,506],[506,507],[507,508],[508,509],[509,510],[510,511],[511,512],[512,513],[513,514],[514,515],[515,516],[517,518],[518,519],[519,520],[520,521],[521,522],[522,523],[523,524],[524,525],[525,526],[526,527],[527,528],[529,530],[530,531],[531,532],[532,533],[533,534],[534,535],[535,536],[536,537],[537,538],[538,539],[539,540],[541,542],[542,543],[543,544],[544,545],[545,546],[546,547],[547,548],[548,549],[549,550],[550,551],[551,552],[553,554],[554,555],[555,556],[556,557],[557,558],[558,559],[559,560],[560,561],[561,562],[562,563],[563,564],[565,566],[566,567],[567,568],[568,569],[569,570],[570,571],[571,572],[572,573],[573,574],[574,575],[575,576],[577,578],[578,579],[579,580],[580,581],[581,582],[582,583],[583,584],[584,585],[585,586],[586,587],[587,588],[589,590],[590,591],[591,592],[592,593],[593,594],[594,595],[595,596],[596,597],[597,598],[598,599],[599,600],[601,602],[602,603],[603,604],[604,605],[605,606],[606,607],[607,608],[608,609],[609,610],[610,611],[611,612],[613,614],[614,615],[615,616],[616,617],[617,618],[618,619],[619,620],[620,621],[621,622],[622,623],[623,624],[625,626],[626,627],[627,628],[628,629],[629,630],[630,631],[631,632],[632,633],[633,634],[634,635],[635,636],[637,638],[638,639],[639,640],[640,641],[641,642],[642,643],[643,644],[644,645],[645,646],[646,647],[647,648],[649,650],[650,651],[651,652],[652,653],[653,654],[654,655],[655,656],[656,657],[657,658],[658,659],[659,660],[661,662],[662,663],[663,664],[664,665],[665,666],[666,667],[667,668],[668,669],[669,670],[670,671],[671,672],[673,674],[674,675],[675,676],[676,677],[677,678],[678,679],[679,680],[680,681],[681,682],[682,683],[683,684],[685,686],[686,687],[687,688],[688,689],[689,690],[690,691],[691,692],[692,693],[693,694],[694,695],[695,696],[697,698],[698,699],[699,700],[700,701],[701,702],[702,703],[703,704],[704,705],[705,706],[706,707],[707,708],[709,710],[710,711],[711,712],[712,713],[713,714],[714,715],[715,716],[716,717],[717,718],[718,719],[719,720],[721,722],[722,723],[723,724],[724,725],[725,726],[726,727],[727,728],[728,729],[729,730],[730,731],[731,732],[733,734],[734,735],[735,736],[736,737],[737,738],[738,739],[739,740],[740,741],[741,742],[742,743],[743,744],[745,746],[746,747],[747,748],[748,749],[749,750],[750,751],[751,752],[752,753],[753,754],[754,755],[755,756],[757,758],[758,759],[759,760],[760,761],[761,762],[762,763],[763,764],[764,765],[765,766],[766,767],[767,768],[769,770],[770,771],[771,772],[772,773],[773,774],[774,775],[775,776],[776,777],[777,778],[778,779],[779,780],[781,782],[782,783],[783,784],[784,785],[785,786],[786,787],[787,788],[788,789],[789,790],[790,791],[791,792],[793,794],[794,795],[795,796],[796,797],[797,798],[798,799],[799,800],[800,801],[801,802],[802,803],[803,804],[805,806],[806,807],[807,808],[808,809],[809,810],[810,811],[811,812],[812,813],[813,814],[814,815],[815,816],[817,818],[818,819],[819,820],[820,821],[821,822],[822,823],[823,824],[824,825],[825,826],[826,827],[827,828],[829,830],[830,831],[831,832],[832,833],[833,834],[834,835],[835,836],[836,837],[837,838],[838,839],[839,840],[841,842],[842,843],[843,844],[844,845],[845,846],[846,847],[847,848],[848,849],[849,850],[850,851],[851,852],[853,854],[854,855],[855,856],[856,857],[857,858],[858,859],[859,860],[860,861],[861,862],[862,863],[863,864],[865,866],[866,867],[867,868],[868,869],[869,870],[870,871],[871,872],[872,873],[873,874],[874,875],[875,876],[876,877],[877,878],[878,879],[879,880],[880,881],[881,882],[883,884],[884,885],[885,886],[886,887],[887,888],[888,889],[889,890],[890,891],[891,892],[892,893],[893,894],[894,895],[895,896],[896,897],[897,898],[898,899],[899,900],[901,902],[902,903],[903,904],[904,905],[905,906],[906,907],[907,908],[908,909],[909,910],[910,911],[911,912],[912,913],[913,914],[914,915],[915,916],[916,917],[917,918],[919,920],[920,921],[921,922],[922,923],[923,924],[924,925],[925,926],[926,927],[927,928],[928,929],[929,930],[930,931],[931,932],[932,933],[933,934],[934,935],[935,936],[937,938],[938,939],[939,940],[940,941],[941,942],[942,943],[943,944],[944,945],[945,946],[946,947],[947,948],[948,949],[949,950],[950,951],[951,952],[952,953],[953,954],[955,956],[956,957],[957,958],[958,959],[959,960],[960,961],[961,962],[962,963],[963,964],[964,965],[965,966],[966,967],[967,968],[968,969],[969,970],[970,971],[971,972],[973,974],[974,975],[975,976],[976,977],[977,978],[978,979],[979,980],[980,981],[981,982],[982,983],[983,984],[984,985],[985,986],[986,987],[987,988],[988,989],[989,990],[991,992],[992,993],[993,994],[994,995],[995,996],[996,997],[997,998],[998,999],[999,1e3],[1e3,1001],[1001,1002],[1002,1003],[1003,1004],[1004,1005],[1005,1006],[1006,1007],[1007,1008],[1009,1010],[1010,1011],[1011,1012],[1012,1013],[1013,1014],[1014,1015],[1015,1016],[1016,1017],[1017,1018],[1018,1019],[1019,1020],[1020,1021],[1021,1022],[1022,1023],[1024,1025],[1025,1026],[1026,1027],[1027,1028],[1028,1029],[1029,1030],[1030,1031],[1031,1032],[1032,1033],[1033,1034],[1034,1035],[1035,1036],[1036,1037],[1037,1038],[1038,1039],[1039,1040],[1040,1041],[1042,1043],[1043,1044],[1044,1045],[1045,1046],[1046,1047],[1047,1048],[1048,1049],[1049,1050],[1050,1051],[1051,1052],[1052,1053],[1053,1054],[1054,1055],[1055,1056],[1056,1057],[1057,1058],[1058,1059],[1060,1061],[1061,1062],[1062,1063],[1063,1064],[1064,1065],[1065,1066],[1066,1067],[1067,1068],[1068,1069],[1069,1070],[1070,1071],[1071,1072],[1072,1073],[1073,1074],[1074,1075],[1075,1076],[1076,1077],[1078,1079],[1079,1080],[1080,1081],[1081,1082],[1082,1083],[1083,1084],[1084,1085],[1085,1086],[1086,1087],[1087,1088],[1088,1089],[1089,1090],[1090,1091],[1091,1092],[1092,1093],[1093,1094],[1094,1095],[1096,1097],[1097,1098],[1098,1099],[1099,1100],[1100,1101],[1101,1102],[1102,1103],[1103,1104],[1104,1105],[1105,1106],[1106,1107],[1107,1108],[1108,1109],[1109,1110],[1110,1111],[1111,1112],[1112,1113],[1114,1115],[1115,1116],[1116,1117],[1117,1118],[1118,1119],[1119,1120],[1120,1121],[1121,1122],[1122,1123],[1123,1124],[1124,1125],[1125,1126],[1126,1127],[1127,1128],[1128,1129],[1129,1130],[1130,1131],[1132,1133],[1133,1134],[1134,1135],[1135,1136],[1136,1137],[1137,1138],[1138,1139],[1139,1140],[1140,1141],[1141,1142],[1142,1143],[1143,1144],[1144,1145],[1145,1146],[1146,1147],[1147,1148],[1148,1149],[1150,1151],[1151,1152],[1152,1153],[1153,1154],[1154,1155],[1155,1156],[1156,1157],[1157,1158],[1158,1159],[1159,1160],[1160,1161],[1161,1162],[1162,1163],[1163,1164],[1164,1165],[1165,1166],[1166,1167],[1168,1169],[1169,1170],[1170,1171],[1171,1172],[1172,1173],[1173,1174],[1174,1175],[1175,1176],[1176,1177],[1177,1178],[1178,1179],[1179,1180],[1180,1181],[1181,1182],[1182,1183],[1183,1184],[1184,1185],[1186,1187],[1187,1188],[1188,1189],[1189,1190],[1190,1191],[1191,1192],[1192,1193],[1193,1194],[1194,1195],[1195,1196],[1196,1197],[1197,1198],[1198,1199],[1199,1200],[1200,1201],[1201,1202],[1202,1203],[1204,1205],[1205,1206],[1206,1207],[1207,1208],[1208,1209],[1209,1210],[1210,1211],[1211,1212],[1212,1213],[1213,1214],[1214,1215],[1215,1216],[1216,1217],[1217,1218],[1218,1219],[1219,1220],[1220,1221],[1222,1223],[1223,1224],[1224,1225],[1225,1226],[1226,1227],[1227,1228],[1228,1229],[1229,1230],[1230,1231],[1231,1232],[1232,1233],[1233,1234],[1234,1235],[1235,1236],[1236,1237],[1237,1238],[1238,1239],[1240,1241],[1241,1242],[1242,1243],[1243,1244],[1244,1245],[1245,1246],[1246,1247],[1247,1248],[1248,1249],[1249,1250],[1250,1251],[1251,1252],[1252,1253],[1253,1254],[1254,1255],[1255,1256],[1256,1257],[1258,1259],[1259,1260],[1260,1261],[1261,1262],[1262,1263],[1263,1264],[1264,1265],[1265,1266],[1266,1267],[1267,1268],[1268,1269],[1269,1270],[1270,1271],[1271,1272],[1272,1273],[1273,1274],[1274,1275],[1276,1277],[1277,1278],[1278,1279],[1279,1280],[1280,1281],[1281,1282],[1282,1283],[1283,1284],[1284,1285],[1285,1286],[1286,1287],[1287,1288],[1288,1289],[1289,1290],[1290,1291],[1291,1292],[1292,1293],[1294,1295],[1295,1296],[1296,1297],[1297,1298],[1298,1299],[1299,1300],[1300,1301],[1301,1302],[1302,1303],[1303,1304],[1304,1305],[1305,1306],[1306,1307],[1307,1308],[1308,1309],[1309,1310],[1310,1311],[1312,1313],[1313,1314],[1314,1315],[1315,1316],[1316,1317],[1317,1318],[1318,1319],[1319,1320],[1320,1321],[1321,1322],[1322,1323],[1323,1324],[1324,1325],[1325,1326],[1326,1327],[1327,1328],[1328,1329],[1330,1331],[1331,1332],[1332,1333],[1333,1334],[1334,1335],[1335,1336],[1336,1337],[1337,1338],[1338,1339],[1339,1340],[1340,1341],[1341,1342],[1342,1343],[1343,1344],[1344,1345],[1345,1346],[1346,1347],[1348,1349],[1349,1350],[1350,1351],[1351,1352],[1352,1353],[1353,1354],[1354,1355],[1355,1356],[1356,1357],[1357,1358],[1358,1359],[1359,1360],[1360,1361],[1361,1362],[1362,1363],[1363,1364],[1364,1365],[1366,1367],[1367,1368],[1368,1369],[1369,1370],[1370,1371],[1371,1372],[1372,1373],[1373,1374],[1374,1375],[1375,1376],[1376,1377],[1377,1378],[1378,1379],[1379,1380],[1380,1381],[1381,1382],[1382,1383],[1384,1385],[1385,1386],[1386,1387],[1387,1388],[1388,1389],[1389,1390],[1390,1391],[1391,1392],[1392,1393],[1393,1394],[1394,1395],[1395,1396],[1396,1397],[1397,1398],[1398,1399],[1400,1401],[1401,1402],[1402,1403],[1403,1404],[1404,1405],[1405,1406],[1406,1407],[1407,1408],[1408,1409],[1409,1410],[1410,1411],[1411,1412],[1412,1413],[1413,1414],[1414,1415],[1415,1416],[1416,1417],[1418,1419],[1419,1420],[1420,1421],[1421,1422],[1422,1423],[1423,1424],[1424,1425],[1425,1426],[1426,1427],[1427,1428],[1428,1429],[1429,1430],[1430,1431],[1431,1432],[1432,1433],[1433,1434],[1434,1435],[1436,1437],[1437,1438],[1438,1439],[1439,1440],[1440,1441],[1441,1442],[1442,1443],[1443,1444],[1444,1445],[1445,1446],[1446,1447],[1447,1448],[1448,1449],[1449,1450],[1450,1451],[1451,1452],[1452,1453],[1454,1455],[1455,1456],[1456,1457],[1457,1458],[1458,1459],[1459,1460],[1460,1461],[1461,1462],[1462,1463],[1463,1464],[1464,1465],[1465,1466],[1466,1467],[1467,1468],[1468,1469],[1469,1470],[1470,1471],[1472,1473],[1473,1474],[1474,1475],[1475,1476],[1476,1477],[1477,1478],[1478,1479],[1479,1480],[1480,1481],[1481,1482],[1482,1483],[1483,1484],[1484,1485],[1485,1486],[1487,1488],[1488,1489],[1489,1490],[1490,1491],[1491,1492],[1492,1493],[1493,1494],[1494,1495],[1495,1496],[1496,1497],[1497,1498],[1498,1499],[1499,1500],[1500,1501],[1501,1502],[1502,1503],[1503,1504],[1505,1506],[1506,1507],[1507,1508],[1508,1509],[1509,1510],[1510,1511],[1511,1512],[1512,1513],[1513,1514],[1514,1515],[1515,1516],[1516,1517],[1517,1518],[1518,1519],[1519,1520],[1520,1521],[1521,1522],[1523,1524],[1524,1525],[1525,1526],[1526,1527],[1527,1528],[1528,1529],[1529,1530],[1530,1531],[1531,1532],[1532,1533],[1533,1534],[1534,1535],[1535,1536],[1536,1537],[1537,1538],[1538,1539],[1539,1540]]}},z0Vl:function(n,e){n.exports="precision mediump float;\n#define GLSLIFY 1\nuniform vec4 color;\nvoid main() {\n  gl_FragColor = color;\n}\n"}},["NHnr"]);